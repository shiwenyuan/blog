<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shiwenyuan&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shiwenyuan.github.io/"/>
  <updated>2020-05-04T10:01:39.445Z</updated>
  <id>http://shiwenyuan.github.io/</id>
  
  <author>
    <name>阿远</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac下源码编译php7.4</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9slh000l13703ke8pozh.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9slh000l13703ke8pozh.html</id>
    <published>2020-05-04T07:00:18.000Z</published>
    <updated>2020-05-04T10:01:39.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC-OS-X-编译安装PHP7-4"><a href="#MAC-OS-X-编译安装PHP7-4" class="headerlink" title="MAC OS X 编译安装PHP7.4"></a>MAC OS X 编译安装PHP7.4</h1><h2 id="源码包下载地址"><a href="#源码包下载地址" class="headerlink" title="源码包下载地址"></a>源码包下载地址</h2><p><a href="https://www.php.net/distributions/php-7.4.5.tar.xz" target="_blank" rel="noopener">https://www.php.net/distributions/php-7.4.5.tar.xz</a></p><p>下载到本地后解压到一个临时文件夹内,此处没有硬性要求。我一般都是自己新建tmp文件夹,方便存放。(ps:<strong>日后如果需要源码安装扩展的话可以直接去源码包的ext目录找到对应扩展内容</strong>)</p><h2 id="解压后的源码包如下"><a href="#解压后的源码包如下" class="headerlink" title="解压后的源码包如下"></a>解压后的源码包如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 tree -L 1</span><br><span class="line">.</span><br><span class="line">├── CODING_STANDARDS.md</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── EXTENSIONS</span><br><span class="line">├── LICENSE</span><br><span class="line">├── NEWS</span><br><span class="line">├── README.REDIST.BINS</span><br><span class="line">├── README.md</span><br><span class="line">├── TSRM</span><br><span class="line">├── UPGRADING</span><br><span class="line">├── UPGRADING.INTERNALS</span><br><span class="line">├── Zend</span><br><span class="line">├── appveyor</span><br><span class="line">├── azure</span><br><span class="line">├── azure-pipelines.yml</span><br><span class="line">├── build</span><br><span class="line">├── buildconf</span><br><span class="line">├── buildconf.bat</span><br><span class="line">├── configure</span><br><span class="line">├── configure.ac</span><br><span class="line">├── docs</span><br><span class="line">├── ext</span><br><span class="line">├── main</span><br><span class="line">├── pear</span><br><span class="line">├── php.ini-development</span><br><span class="line">├── php.ini-production</span><br><span class="line">├── run-tests.php</span><br><span class="line">├── sapi</span><br><span class="line">├── scripts</span><br><span class="line">├── tests</span><br><span class="line">├── travis</span><br><span class="line">└── win32</span><br><span class="line"></span><br><span class="line">14 directories, 17 files</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 ./configure --prefix=/Users/shiwenyuan/php \</span><br><span class="line">    --with-mcrypt \</span><br><span class="line">    --with-mhash \</span><br><span class="line">    --with-mysqli=shared,mysqlnd \</span><br><span class="line">    --with-pdo-mysql=shared,mysqlnd \</span><br><span class="line">    --with-gd \</span><br><span class="line">    --with-openssl \</span><br><span class="line">    --with-iconv \</span><br><span class="line">    --with-zlib \</span><br><span class="line">    --enable-zip \</span><br><span class="line">    --enable-inline-optimization \</span><br><span class="line">    --disable-debug \</span><br><span class="line">    --disable-rpath \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --enable-xml \</span><br><span class="line">    --enable-bcmath \</span><br><span class="line">    --enable-shmop \</span><br><span class="line">    --enable-sysvsem \</span><br><span class="line">    --enable-mbregex \</span><br><span class="line">    --enable-mbstring \</span><br><span class="line">    --enable-ftp \</span><br><span class="line">    --enable-gd-native-ttf \</span><br><span class="line">    --enable-pcntl \</span><br><span class="line">    --enable-sockets \</span><br><span class="line">    --with-xmlrpc \</span><br><span class="line">    --enable-soap \</span><br><span class="line">    --without-pear \</span><br><span class="line">    --with-gettext \</span><br><span class="line">    --enable-session \</span><br><span class="line">    --with-curl \</span><br><span class="line">    --with-jpeg-dir \</span><br><span class="line">    --with-freetype-dir \</span><br><span class="line">    --enable-opcache \</span><br><span class="line">    --enable-fpm \</span><br><span class="line">    --without-gdbm \</span><br><span class="line">    --enable-fast-install \</span><br><span class="line">    --disable-fileinfo</span><br></pre></td></tr></table></figure><h3 id="编译过程常见问题"><a href="#编译过程常见问题" class="headerlink" title="编译过程常见问题"></a>编译过程常见问题</h3><h4 id="configure-error-Package-requirements-openssl-gt-1-0-1-were-not-met"><a href="#configure-error-Package-requirements-openssl-gt-1-0-1-were-not-met" class="headerlink" title="configure: error: Package requirements (openssl &gt;= 1.0.1) were not met:"></a>configure: error: Package requirements (openssl &gt;= 1.0.1) were not met:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Package requirements (openssl &gt;= 1.0.1) were not met:</span><br><span class="line"></span><br><span class="line">No package &apos;openssl&apos; found</span><br><span class="line"></span><br><span class="line">Consider adjusting the PKG_CONFIG_PATH environment variable if you</span><br><span class="line">installed software in a non-standard prefix.</span><br><span class="line"></span><br><span class="line">Alternatively, you may set the environment variables OPENSSL_CFLAGS</span><br><span class="line">and OPENSSL_LIBS to avoid the need to call pkg-config.</span><br><span class="line">See the pkg-config man page for more details.</span><br></pre></td></tr></table></figure><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>没有找到openssl</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>我的openssl是通过brew安装的</p><h6 id="强制brew-link更新"><a href="#强制brew-link更新" class="headerlink" title="强制brew link更新"></a>强制brew link更新</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Warning: Refusing to link macOS provided/shadowed software: openssl@1.1</span><br><span class="line">If you need to have openssl@1.1 first in your PATH run:</span><br><span class="line">  echo &apos;export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find openssl@1.1 you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;</span><br><span class="line">  export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;</span><br><span class="line"></span><br><span class="line">For pkg-config to find openssl@1.1 you may need to set:</span><br><span class="line">  export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;</span><br></pre></td></tr></table></figure><p>上面内容大概就是brew不建议这么操作，但是也给出了解决办法,命令行依次执行上面说明需要添加的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  openssl echo &apos;export PATH=&quot;/usr/local/opt/openssl@1.1/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">➜  openssl export LDFLAGS=&quot;-L/usr/local/opt/openssl@1.1/lib&quot;</span><br><span class="line">➜  openssl export CPPFLAGS=&quot;-I/usr/local/opt/openssl@1.1/include&quot;</span><br><span class="line">➜  openssl export PKG_CONFIG_PATH=&quot;/usr/local/opt/openssl@1.1/lib/pkgconfig&quot;</span><br><span class="line">➜  openssl source ~/.zshrc</span><br></pre></td></tr></table></figure><h6 id="修正对应编译项"><a href="#修正对应编译项" class="headerlink" title="修正对应编译项"></a>修正对应编译项</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-openssl=/usr/local/Cellar/openssl@1.1/1.1.1f</span><br></pre></td></tr></table></figure><h4 id="configure-error-Cannot-locate-header-file-libintl-h"><a href="#configure-error-Cannot-locate-header-file-libintl-h" class="headerlink" title="configure: error: Cannot locate header file libintl.h"></a>configure: error: Cannot locate header file libintl.h</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Cannot locate header file libintl.h</span><br></pre></td></tr></table></figure><h5 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5><p>–with-gettext编译报错，没有找到gettext的可执行文件，因为configure文件中gettext的默认path 是 <code>/usr/local</code> <code>/usr</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $PHP_GETTEXT /usr/local /usr ;do</span><br></pre></td></tr></table></figure><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><h6 id="找到对应可执行程序路径"><a href="#找到对应可执行程序路径" class="headerlink" title="找到对应可执行程序路径"></a>找到对应可执行程序路径</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 which gettext</span><br><span class="line">/usr/local/opt/gettext/bin/gettext</span><br></pre></td></tr></table></figure><p>如果<strong>which gettext</strong>没有结果则执行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gettext</span><br></pre></td></tr></table></figure><h6 id="修正对应编译项-1"><a href="#修正对应编译项-1" class="headerlink" title="修正对应编译项"></a>修正对应编译项</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-gettext=/usr/local/opt/gettext</span><br></pre></td></tr></table></figure><h4 id="configure-error-Please-specify-the-install-prefix-of-iconv-with-–with-iconv"><a href="#configure-error-Please-specify-the-install-prefix-of-iconv-with-–with-iconv" class="headerlink" title="configure: error: Please specify the install prefix of iconv with –with-iconv="></a>configure: error: Please specify the install prefix of iconv with –with-iconv=<dir></dir></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checking for iconv... no</span><br><span class="line">checking for libiconv... no</span><br><span class="line">configure: error: Please specify the install prefix of iconv with --with-iconv=&lt;DIR&gt;</span><br></pre></td></tr></table></figure><h5 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5><p>–with-iconv编译报错，没有找到iconv的可执行文件,或者系统中没有libiconv</p><h5 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h5><h6 id="找到对应可执行程序路径-1"><a href="#找到对应可执行程序路径-1" class="headerlink" title="找到对应可执行程序路径"></a>找到对应可执行程序路径</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 which iconv</span><br><span class="line">/usr/local/opt/libiconv/bin/iconv</span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 brew install libiconv</span><br><span class="line">➜  php-7.4.5 which iconv</span><br><span class="line">/usr/local/opt/libiconv/bin/iconv</span><br></pre></td></tr></table></figure><h6 id="修正对应编译项-2"><a href="#修正对应编译项-2" class="headerlink" title="修正对应编译项"></a>修正对应编译项</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-iconv=/usr/local/opt/libiconv/</span><br></pre></td></tr></table></figure><h3 id="最终编译语句"><a href="#最终编译语句" class="headerlink" title="最终编译语句"></a>最终编译语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 ./configure --prefix=/Users/shiwenyuan/php \</span><br><span class="line">    --with-mcrypt \</span><br><span class="line">    --with-mhash \</span><br><span class="line">    --with-mysqli=shared,mysqlnd \</span><br><span class="line">    --with-pdo-mysql=shared,mysqlnd \</span><br><span class="line">    --with-gd \</span><br><span class="line">    --with-iconv=/usr/local/opt/libiconv/ \</span><br><span class="line">    --with-openssl=/usr/local/Cellar/openssl@1.1/1.1.1f\</span><br><span class="line">    --with-zlib \</span><br><span class="line">    --enable-zip \</span><br><span class="line">    --enable-inline-optimization \</span><br><span class="line">    --disable-debug \</span><br><span class="line">    --disable-rpath \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --enable-xml \</span><br><span class="line">    --enable-bcmath \</span><br><span class="line">    --enable-shmop \</span><br><span class="line">    --enable-sysvsem \</span><br><span class="line">    --enable-mbregex \</span><br><span class="line">    --enable-mbstring \</span><br><span class="line">    --enable-ftp \</span><br><span class="line">    --enable-gd-native-ttf \</span><br><span class="line">    --enable-pcntl \</span><br><span class="line">    --enable-sockets \</span><br><span class="line">    --with-xmlrpc \</span><br><span class="line">    --enable-soap \</span><br><span class="line">    --without-pear \</span><br><span class="line">    --with-gettext=/usr/local/opt/gettext \</span><br><span class="line">    --enable-session \</span><br><span class="line">    --with-curl \</span><br><span class="line">    --with-jpeg-dir \</span><br><span class="line">    --with-freetype-dir \</span><br><span class="line">    --enable-opcache \</span><br><span class="line">    --enable-fpm \</span><br><span class="line">    --without-gdbm \</span><br><span class="line">    --enable-fast-install \</span><br><span class="line">    --disable-fileinfo</span><br></pre></td></tr></table></figure><h3 id="编译成功后显示"><a href="#编译成功后显示" class="headerlink" title="编译成功后显示"></a>编译成功后显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Generating files</span><br><span class="line">configure: patching main/php_config.h.in</span><br><span class="line">configure: creating ./config.status</span><br><span class="line">creating main/internal_functions.c</span><br><span class="line">creating main/internal_functions_cli.c</span><br><span class="line">config.status: creating main/build-defs.h</span><br><span class="line">config.status: creating scripts/phpize</span><br><span class="line">config.status: creating scripts/man1/phpize.1</span><br><span class="line">config.status: creating scripts/php-config</span><br><span class="line">config.status: creating scripts/man1/php-config.1</span><br><span class="line">config.status: creating sapi/cli/php.1</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.conf</span><br><span class="line">config.status: creating sapi/fpm/www.conf</span><br><span class="line">config.status: creating sapi/fpm/init.d.php-fpm</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.service</span><br><span class="line">config.status: creating sapi/fpm/php-fpm.8</span><br><span class="line">config.status: creating sapi/fpm/status.html</span><br><span class="line">config.status: creating sapi/phpdbg/phpdbg.1</span><br><span class="line">config.status: creating sapi/cgi/php-cgi.1</span><br><span class="line">config.status: creating ext/phar/phar.1</span><br><span class="line">config.status: creating ext/phar/phar.phar.1</span><br><span class="line">config.status: creating main/php_config.h</span><br><span class="line">config.status: executing default commands</span><br><span class="line"></span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| License:                                                           |</span><br><span class="line">| This software is subject to the PHP License, available in this     |</span><br><span class="line">| distribution in the file LICENSE. By continuing this installation  |</span><br><span class="line">| process, you are bound by the terms of this license agreement.     |</span><br><span class="line">| If you do not agree with the terms of this license, you must abort |</span><br><span class="line">| the installation process at this point.                            |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">Thank you for using PHP.</span><br></pre></td></tr></table></figure><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Generating phar.php</span><br><span class="line">Generating phar.phar</span><br><span class="line">PEAR package PHP_Archive not installed: generated phar will require PHP&apos;s phar extension be enabled.</span><br><span class="line">directorytreeiterator.inc</span><br><span class="line">clicommand.inc</span><br><span class="line">directorygraphiterator.inc</span><br><span class="line">invertedregexiterator.inc</span><br><span class="line">pharcommand.inc</span><br><span class="line">phar.inc</span><br><span class="line"></span><br><span class="line">Build complete.</span><br><span class="line">Don&apos;t forget to run &apos;make test&apos;.</span><br></pre></td></tr></table></figure><h2 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  php-7.4.5 make install</span><br><span class="line">Installing shared extensions:     /Users/shiwenyuan/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line">Installing PHP CLI binary:        /Users/shiwenyuan/php/bin/</span><br><span class="line">Installing PHP CLI man page:      /Users/shiwenyuan/php/php/man/man1/</span><br><span class="line">Installing PHP FPM binary:        /Users/shiwenyuan/php/sbin/</span><br><span class="line">Installing PHP FPM defconfig:     /Users/shiwenyuan/php/etc/</span><br><span class="line">Installing PHP FPM man page:      /Users/shiwenyuan/php/php/man/man8/</span><br><span class="line">Installing PHP FPM status page:   /Users/shiwenyuan/php/php/php/fpm/</span><br><span class="line">Installing phpdbg binary:         /Users/shiwenyuan/php/bin/</span><br><span class="line">Installing phpdbg man page:       /Users/shiwenyuan/php/php/man/man1/</span><br><span class="line">Installing PHP CGI binary:        /Users/shiwenyuan/php/bin/</span><br><span class="line">Installing PHP CGI man page:      /Users/shiwenyuan/php/php/man/man1/</span><br><span class="line">Installing build environment:     /Users/shiwenyuan/php/lib/php/build/</span><br><span class="line">Installing header files:          /Users/shiwenyuan/php/include/php/</span><br><span class="line">Installing helper programs:       /Users/shiwenyuan/php/bin/</span><br><span class="line">  program: phpize</span><br><span class="line">  program: php-config</span><br><span class="line">Installing man pages:             /Users/shiwenyuan/php/php/man/man1/</span><br><span class="line">  page: phpize.1</span><br><span class="line">  page: php-config.1</span><br><span class="line">/Users/shiwenyuan/tmp/LNMP/php-7.4.5/build/shtool install -c ext/phar/phar.phar /Users/shiwenyuan/php/bin</span><br><span class="line">ln -s -f phar.phar /Users/shiwenyuan/php/bin/phar</span><br><span class="line">Installing PDO headers:           /Users/shiwenyuan/php/include/php/ext/pdo/</span><br></pre></td></tr></table></figure><h2 id="编译后指定的php目录"><a href="#编译后指定的php目录" class="headerlink" title="编译后指定的php目录"></a>编译后指定的php目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">➜  php pwd</span><br><span class="line">/Users/shiwenyuan/php</span><br><span class="line">➜  php tree -L 2</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── phar -&gt; phar.phar</span><br><span class="line">│   ├── phar.phar</span><br><span class="line">│   ├── php</span><br><span class="line">│   ├── php-cgi</span><br><span class="line">│   ├── php-config</span><br><span class="line">│   ├── phpdbg</span><br><span class="line">│   └── phpize</span><br><span class="line">├── etc</span><br><span class="line">│   ├── php-fpm.conf.default</span><br><span class="line">│   └── php-fpm.d</span><br><span class="line">├── include</span><br><span class="line">│   └── php</span><br><span class="line">├── lib</span><br><span class="line">│   └── php</span><br><span class="line">├── php</span><br><span class="line">│   ├── man</span><br><span class="line">│   └── php</span><br><span class="line">├── sbin</span><br><span class="line">│   └── php-fpm</span><br><span class="line">└── var</span><br><span class="line">    ├── log</span><br><span class="line">    └── run</span><br><span class="line"></span><br><span class="line">14 directories, 9 files</span><br></pre></td></tr></table></figure><h3 id="此时需要配置一下ini和php-fpm"><a href="#此时需要配置一下ini和php-fpm" class="headerlink" title="此时需要配置一下ini和php-fpm"></a>此时需要配置一下ini和php-fpm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  php cp ~/tmp/LNMP/php-7.4.5/php.ini-production ~/php/etc/php.ini</span><br><span class="line">➜  php cd etc/php-fpm.d</span><br><span class="line">➜  php-fpm.d ls</span><br><span class="line">www.conf.default</span><br><span class="line">➜  php-fpm.d cd ..</span><br><span class="line">➜  etc ls</span><br><span class="line">php-fpm.conf.default php-fpm.d            php.ini</span><br><span class="line">➜  etc cp php-fpm.conf.default php-fpm.conf</span><br><span class="line">➜  etc cd php-fpm.d</span><br><span class="line">➜  php-fpm.d ls</span><br><span class="line">www.conf.default</span><br><span class="line">➜  php-fpm.d cp www.conf.default www.conf</span><br><span class="line">➜  php-fpm.d cd ..</span><br><span class="line">➜  etc ls</span><br><span class="line">php-fpm.conf         php-fpm.conf.default php-fpm.d            php.ini</span><br><span class="line">➜  etc vim php-fpm.conf //;pid=run/php-fpm.pid修正为 pid = ~/php/var/run/php-fpm.pid</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="创建index-php"><a href="#创建index-php" class="headerlink" title="创建index.php"></a>创建index.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  public cat index.php                               </span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><h3 id="启动服务-ps-本地并未安装webserver，所以本次测试使用的是php自带的webserver"><a href="#启动服务-ps-本地并未安装webserver，所以本次测试使用的是php自带的webserver" class="headerlink" title="启动服务(ps:本地并未安装webserver，所以本次测试使用的是php自带的webserver)"></a>启动服务(ps:本地并未安装webserver，所以本次测试使用的是php自带的webserver)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  public ~/php/bin/php -c ~/php/etc/php.ini -S localhost:9001 </span><br><span class="line">[Mon May  4 16:46:01 2020] PHP 7.4.5 Development Server (http://localhost:9001) started</span><br></pre></td></tr></table></figure><h3 id="打开浏览器访问"><a href="#打开浏览器访问" class="headerlink" title="打开浏览器访问"></a>打开浏览器访问</h3><p><img src="https://i.loli.net/2020/05/04/dSB8KmrgjyifZEn.png" alt="WechatIMG1.png"></p><h2 id="php扩展安装"><a href="#php扩展安装" class="headerlink" title="php扩展安装"></a>php扩展安装</h2><h3 id="gd"><a href="#gd" class="headerlink" title="gd"></a>gd</h3><p>刚刚gd库安装失败了,现在去源码包中重新安装一边</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  gd pwd</span><br><span class="line">/Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd</span><br></pre></td></tr></table></figure><h4 id="phpize"><a href="#phpize" class="headerlink" title="phpize"></a>phpize</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  gd ~/php/bin/phpize</span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20190902</span><br><span class="line">Zend Module Api No:      20190902</span><br><span class="line">Zend Extension Api No:   320190902</span><br></pre></td></tr></table></figure><p>此步骤编译成功后会生成<code>configure</code>可执行文件</p><h4 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-php-config=/Users/shiwenyuan/php/bin/php-config</span><br></pre></td></tr></table></figure><h5 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Package requirements (libpng) were not met:</span><br><span class="line"></span><br><span class="line">No package &apos;libpng&apos; found</span><br><span class="line"></span><br><span class="line">Consider adjusting the PKG_CONFIG_PATH environment variable if you</span><br><span class="line">installed software in a non-standard prefix.</span><br><span class="line"></span><br><span class="line">Alternatively, you may set the environment variables PNG_CFLAGS</span><br><span class="line">and PNG_LIBS to avoid the need to call pkg-config.</span><br><span class="line">See the pkg-config man page for more details.</span><br></pre></td></tr></table></figure><ol><li>缺少libpng库</li><li>用<code>brew install libpng</code>安装库后</li><li>重新执行<code>./configure --with-php-config=/Users/shiwenyuan/php/bin/php-config</code></li></ol><p>编译成功后会生成对应的Makefile</p><h4 id="make-amp-amp-make-install"><a href="#make-amp-amp-make-install" class="headerlink" title="make &amp;&amp; make install"></a>make &amp;&amp; make install</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dsymutil .libs/gd.so || :</span><br><span class="line">creating gd.la</span><br><span class="line">(cd .libs &amp;&amp; rm -f gd.la &amp;&amp; ln -s ../gd.la gd.la)</span><br><span class="line">/bin/sh /Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd/libtool --mode=install cp ./gd.la /Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd/modules</span><br><span class="line">cp ./.libs/gd.so /Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd/modules/gd.so</span><br><span class="line">cp ./.libs/gd.lai /Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd/modules/gd.la</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Libraries have been installed in:</span><br><span class="line">   /Users/shiwenyuan/tmp/LNMP/php-7.4.5/ext/gd/modules</span><br><span class="line"></span><br><span class="line">If you ever happen to want to link against installed libraries</span><br><span class="line">in a given directory, LIBDIR, you must either use libtool, and</span><br><span class="line">specify the full pathname of the library, or use the `-LLIBDIR&apos;</span><br><span class="line">flag during linking and do at least one of the following:</span><br><span class="line">   - add LIBDIR to the `DYLD_LIBRARY_PATH&apos; environment variable</span><br><span class="line">     during execution</span><br><span class="line"></span><br><span class="line">See any operating system documentation about shared libraries for</span><br><span class="line">more information, such as the ld(1) and ld.so(8) manual pages.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build complete.</span><br><span class="line">Don&apos;t forget to run &apos;make test&apos;.</span><br><span class="line"></span><br><span class="line">Installing shared extensions:     /Users/shiwenyuan/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line">Installing header files:          /Users/shiwenyuan/php/include/php/</span><br></pre></td></tr></table></figure><h4 id="修改php-ini"><a href="#修改php-ini" class="headerlink" title="修改php.ini"></a>修改php.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;extension=\&quot;gd.so\&quot;&quot; &gt;&gt; /Users/shiwenyuan/php/etc/php.ini</span><br></pre></td></tr></table></figure><h4 id="重启php服务后访问"><a href="#重启php服务后访问" class="headerlink" title="重启php服务后访问"></a>重启php服务后访问</h4><p><img src="https://i.loli.net/2020/05/04/8ieSD65qchutHPQ.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MAC-OS-X-编译安装PHP7-4&quot;&gt;&lt;a href=&quot;#MAC-OS-X-编译安装PHP7-4&quot; class=&quot;headerlink&quot; title=&quot;MAC OS X 编译安装PHP7.4&quot;&gt;&lt;/a&gt;MAC OS X 编译安装PHP7.4&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="php" scheme="http://shiwenyuan.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://shiwenyuan.github.io/tags/php/"/>
    
      <category term="mac" scheme="http://shiwenyuan.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>你以为买进了原油期货，其实你从未走出银行</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9slj000x137019q7zbb8.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9slj000x137019q7zbb8.html</id>
    <published>2020-04-22T15:01:38.000Z</published>
    <updated>2020-05-04T10:04:04.766Z</updated>
    
    <content type="html"><![CDATA[<p>为了让我的说法更有说服力，就在网上搜了一下，发现还是有文章跟我表述的观点大抵相同，全文比较长，但表述得比我肯定更为专业更为系统，但不用担心不好理解。特分享出来，对长文章过敏的可以直接拉到底下，进行评论。</p><p><strong>文章来源：华夏时报</strong><br>中行原油宝爆仓事件沸沸扬扬，几乎所有人都把它当作投资者买了原油期货爆仓的故事。其实如果搞懂了原油宝的交易原理，就可以明白，爆仓的是中行，而投资者从未直接买进过原油期货。只有搞懂了原油宝的交易原理，才能从根本上厘清这件事的性质。</p><h2 id="原油宝是代客买卖原油期货"><a href="#原油宝是代客买卖原油期货" class="headerlink" title="原油宝是代客买卖原油期货"></a>原油宝是代客买卖原油期货</h2><p>原油宝是几大银行都推出的一项代客理财业务，其他几大银行没有出事，不是他们有先见之明，而是因为他们在原油宝产品规则上设置的最后交易日比中行提前了1个星期，侥幸躲过一劫。几大银行的原油宝产品大同小异，都是作为理财产品推荐给客户，都声明是挂钩原油期货，是类似原油期货交易。<br>那么原油宝是怎么类似原油期货交易的呢？说复杂很复杂，但说简单也很简单，复杂是因为表现形式，简单是因为交易原理，搞懂了原油宝的交易原理，一切就豁然开朗了。</p><p>原油宝是银行面向个人投资者的理财产品，银行首先是给自己开了一个大账户，这个大账户可以在境外交易所直接进行原油期货交易。银行自己并不想交易原油期货，这种投机性交易超出了它的经营范围，但它想挖掘新的利润增长点，于是就设计出了原油宝产品，以代客理财的名义为客户交易原油期货。</p><p>客户在银行开立原油宝账户，这个账户是在银行内部的，绝无可能到境外交易所去交易原油期货，而是银行根据客户的指令代为交易。那么为什么很多个人投资者都觉得是自己直接在交易原油期货呢？这是银行的刻意误导造成的。</p><h2 id="模拟出来的期货交易场景"><a href="#模拟出来的期货交易场景" class="headerlink" title="模拟出来的期货交易场景"></a>模拟出来的期货交易场景</h2><p>为了做到“类似”期货交易，甚至是神似，银行在自己的内部电脑主机系统模拟了原油期货的交易环境，投资者登入原油宝交易系统，可以看到境外原油期货实时变化的交易行情，行情可能会稍有延迟，然后可以根据行情报价买入或卖出。投资者以为自己这就买进了原油期货，其实自己的报价根本就没有跨出银行的电脑主机系统，投资者的报价是报给银行的，然后银行根据客户的指令在自己的原油宝大账户中买入或卖出。</p><p>做过实盘交易的人都知道，交易行情瞬息万变，报价出去未必能成交。期货交易需要对手盘，没有对手盘，也无法成交。但在原油宝交易中不会发生这样的情况，因为银行自己充当了原油宝投资者的对手盘，对买卖原油宝产品设置了买入价和卖出价，就像外汇买卖一样，买入和卖出有一定的价差，看上去银行是在赚这个价差。但原油宝跟外汇买卖很不一样的是，银行不仅仅是赚价差。</p><h2 id="汇总买卖后再分配到个人"><a href="#汇总买卖后再分配到个人" class="headerlink" title="汇总买卖后再分配到个人"></a>汇总买卖后再分配到个人</h2><p>银行每天都会接到大量客户的交易指令，很多交易指令是鸡零狗碎的，有的只有1桶或几桶，每个客户的报价又不一样。银行不可能一一对应为这些客户到境外期货市场去买卖原油期货，而是将这些交易指令汇总以后再执行，然后再根据自己的买入成本加价分摊给每个客户，只有对大客户才会实时执行买卖指令。这就是买入价和卖出价的由来，这也是银行不会亏的原因。</p><p>这种情形很像老八股时代万国证券代理沪市投资者买卖深市股票。那个时候，沪市投资者没有深市股票账户，不能买卖深市股票，但万国证券有深市股票账户，可以买卖深市股票。很多沪市投资者想买深市股票，怎么办呢？万国证券想出了一个办法，让投资者向它报价买卖深市股票，它再汇总投资者的交易指令，用自己的大账户买卖深市股票，然后分配给投资者。投资者拿到的股票交割单不是从深交所来的，而是与万国证券的交割单。其实股票还在万国证券的名下，从未过户到投资者本人的名下。</p><h2 id="个人名下并无原油期货仓位"><a href="#个人名下并无原油期货仓位" class="headerlink" title="个人名下并无原油期货仓位"></a>个人名下并无原油期货仓位</h2><p>原油宝也一样，原油期货的交易结算单都是银行跟交易所之间的，所有的仓位都在银行的名下，从未到过原油宝投资者个人的名下。原油宝投资者拿到的交易明细，都是跟银行之间的，是银行根据自己设置的交易系统生成的。实际上，投资者是模拟买进了原油期货，真正的原油期货交易是由银行的原油宝大账户来完成的。</p><p>搞清楚了这个原理，就知道为什么原油宝不存在保证金制度。现在所有关于原油宝保证金和预警平仓的理解都是误解，是银行误导的结果。银行为了做到很像期货交易，所以在产品介绍中说原油宝采用保证金交易形式。其实原油宝投资者不是直接买期货，而是买理财产品，是百分之百全额付款，无需保证金。</p><p>原油期货以前根本不可能出现负价格，投资者不可能亏光本金，因此原油宝产品的平仓线是象征性的，是不会执行的。保证金只有在加杠杆的情况下才适用，只有真正的期货交易才需要保证金来担保。</p><h2 id="没有杠杆的交易不会被强平"><a href="#没有杠杆的交易不会被强平" class="headerlink" title="没有杠杆的交易不会被强平"></a>没有杠杆的交易不会被强平</h2><p>这里可以用股票市场来类比。投资者买进股票都是全额付款，不管股价怎么跌，都不可能跌到0元，哪怕股价跌到1分钱，投资者所持的股票也不可能被强制平仓。只有融资加了杠杆的投资者，才有了保证金担保的概念，才有了跌穿平仓线被强制平仓的事。</p><p>原油宝就是这样，本来没有强制平仓的概念，只是当原油期货出现负价格以后，需要持仓者倒贴钱了，才有了强制平仓的概念。过去原油期货也是不可能跌至0元的，但是前不久芝加哥商品交易所修改了交易规则，允许原油期货的报价可以是负值，这就彻底改变了游戏规则。</p><p>几大银行对这一新的重大变化都没有反应过来，还在一如既往地按部就班操作。其实在这种情况下，原油宝业务就可以立即终止清盘了，因为风险已经变得完全不可控了。</p><h2 id="模拟期货交易可以做得很像"><a href="#模拟期货交易可以做得很像" class="headerlink" title="模拟期货交易可以做得很像"></a>模拟期货交易可以做得很像</h2><p>银行的原油宝业务，说穿了就是给投资者模拟了一个买卖境外原油期货的场景，让投资者进入原油宝交易系统以后，误以为进入了境外期货交易所，在直接买卖原油期货。投资者在其中之所以能够买卖顺畅，其实是因为银行在跟投资者做对手盘，银行既做买方，又做卖方。</p><p>银行为了多赚钱，还允许做T+0交易，鼓励投资者反复买进卖出。因为本来就是虚拟盘交易，交易越多，银行赚得越多，银行原油宝大账户在境外交易所是不会这么频繁交易的。</p><p>这让人想起了以前有一些冒牌期货公司，也是对客户模拟了商品期货交易的场景，受害者表面上像是进入了期货公司的大户室，坐在电脑前进行操作，实际上根本就没有进入期货交易所的交易系统，完全就是在冒牌期货公司自己的电脑系统里面进行模拟交易。交易是假的，但扣钱却是真的，受害者每天还能拿到像模像样的交割单，所以受害者完全没有察觉。其实全部交易都是假的，交易的价格也都可以人为操控，所以受害者无一例外最后都输得精光。</p><p>银行当然不会干这种事，银行是真去买了原油期货，但银行并没有告诉投资者，你并没有真正买进原油期货，是银行在买进。银行成了做市商和代理商，既赚做市商的钱，又赚代理商的钱。本来银行一点风险也没有，风险都是客户的，但原油期货负价格的出现，让银行一下子爆仓了。</p><h2 id="中行可以挽回大部分损失"><a href="#中行可以挽回大部分损失" class="headerlink" title="中行可以挽回大部分损失"></a>中行可以挽回大部分损失</h2><p>原油宝投资者做的是仿真原油期货交易，是没有保证金的，账户中有多少钱就可以买多少，不用追加资金来担保。但银行原油宝的大账户可是货真价实在境外交易所开了户，做的也是真正的原油期货交易，这是需要保证金的，也是有平仓线的。当WTI原油5月合约跌到-37.63美元时，毫无疑问，中行的原油宝大账户是爆仓了。</p><p>期货爆仓以后只有两种结局，一是被强制平仓，二是追加保证金。但是中行原油宝并没有在跌至-37.63美元时平仓，而且还暂停交易了一天。说明中行追加了保证金，这个实力中行是有的。事实是-37.63美元的价格只停留了3分钟，很快就回升收窄了跌幅，第二天已经回归正价格。中行可以挽回很大一部分损失。</p><h2 id="中行爆仓损失与客户无关"><a href="#中行爆仓损失与客户无关" class="headerlink" title="中行爆仓损失与客户无关"></a>中行爆仓损失与客户无关</h2><p>对中行原油宝投资者来说，中行原油宝爆仓的风险本来跟他们是没有什么关系的。4月20日这一天，是中行原油宝对标产品的最后交易日，但不是WTI原油5月合约的最后交易日。中行在当天晚上10点以后关闭了投资者发出指令的通道，也就是不再接受投资者的交易指令了。</p><p>按理，投资者一直是在跟中行在做对手盘，投资者本身并没有持有原油期货仓位，只要投资者有交易指令，中行就应该承接。不再接受投资者交易指令，可以理解为该产品已经到期被强制清盘了。此时WTI原油5月合约并没有跌到负价格，此时清盘不至于亏光本金。但是中行原油宝没有清盘，而是继续持仓，后面的风险其实全部都是应该由中行来承担的。</p><h2 id="以-37-63美元跟客户结算没道理"><a href="#以-37-63美元跟客户结算没道理" class="headerlink" title="以-37.63美元跟客户结算没道理"></a>以-37.63美元跟客户结算没道理</h2><p>中行坚持以-37.63美元的价格跟原油宝投资者结算是没有道理的，因为中行没有在-37.63美元的价格上平仓。虽然-37.63美元被确认为当天的结算价，但该合约并没有到期，第二天还在交易，中行只要补足了保证金，是没有人可以强制中行按此价格进行结算的，要结算也是按第二天2.5美元/桶的价格来结算。</p><p>最后还是那句话，中行应该公开全部交易明细，如果真是按照-37.63美元的价格进行结算了，那是中行自己的事。对原油宝投资者来说，只应承担4月20日22时以前发生的所有损失。在此以后发生的所有损失，应该由中行独自承担，不应转嫁给原油宝的投资者。</p><p>中行如果不想承担这样的损失，应该通过法律途径追究芝加哥商品交易所的责任。-37.63美元的价格不具有任何合理性，是恶意操纵市场的结果，芝加哥商品交易所负有监管失察的责任。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了让我的说法更有说服力，就在网上搜了一下，发现还是有文章跟我表述的观点大抵相同，全文比较长，但表述得比我肯定更为专业更为系统，但不用担心不好理解。特分享出来，对长文章过敏的可以直接拉到底下，进行评论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章来源：华夏时报&lt;/strong&gt;&lt;b
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://shiwenyuan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://shiwenyuan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="理财" scheme="http://shiwenyuan.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>git merge与rebase</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sld000e1370q78p7wmn.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sld000e1370q78p7wmn.html</id>
    <published>2019-12-11T08:48:54.000Z</published>
    <updated>2019-12-11T09:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用<code>git</code>进行版本管理的项目中，当完成一个特性的开发并将其合并到<code>master</code>分支时，我们有两种方式：<code>git merge</code> 和 <code>git rebase</code>。通常，我们对<code>git merge</code>使用的较多，而对于<code>git rebase</code>使用的较少。下面我们就来讲一讲<code>git merge</code>和<code>git rebase</code>的差别和在实际中的使用。</p><h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><p><code>git pull</code>是<code>git fetch</code> + <code>git merge FETCH_HEAD</code>的缩写。所以，默认情况下，<code>git pull</code>就是先<code>fetch</code>，然后执行<code>merge</code>操作，如果加<code>--rebase</code>参数，就是使用<code>git rebase</code>代替<code>git merge</code>。</p><h1 id="merge-和-rebase"><a href="#merge-和-rebase" class="headerlink" title="merge 和 rebase"></a>merge 和 rebase</h1><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思。</p><p>现在我们有这样的两个分支,<code>test</code>和<code>master</code>，提交如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      D---E test</span><br><span class="line">     /</span><br><span class="line">A---B---C---F master</span><br></pre></td></tr></table></figure><p>在<code>master</code>执行<code>git merge test</code>,然后会得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      D--------E</span><br><span class="line">     /          \</span><br><span class="line">A---B---C---F----G   test, master</span><br></pre></td></tr></table></figure><p>在<code>master</code>执行<code>git rebase test</code>，然后得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A---B---D---E---C&apos;---F&apos; test, master</span><br></pre></td></tr></table></figure><p>可以看到，merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。</p><h3 id="其他内容放这里"><a href="#其他内容放这里" class="headerlink" title="其他内容放这里"></a>其他内容放这里</h3><p>通过上面可以看到，想要更好的提交树，使用<code>rebase</code>操作会更好一点。这样可以线性的看到每一次提交，并且没有增加提交节点。</p><p>在我们操作过程中。<code>merge</code>操作遇到冲突的时候，当前<code>merge</code>不能继续进行下去。手动修改冲突内容后，<code>add</code>修改，<code>commit</code>就可以了。</p><p>而<code>rebase</code>操作的话，会中断<code>rebase</code>,同时会提示去解决冲突。解决冲突后,将修改<code>add</code>后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用&lt;code&gt;git&lt;/code&gt;进行版本管理的项目中，当完成一个特性的开发并将其合并到&lt;code&gt;master&lt;/code&gt;分支时，我
      
    
    </summary>
    
    
      <category term="git" scheme="http://shiwenyuan.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://shiwenyuan.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Phpstorm开启Laravel代码提示</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9slb000a1370yfz49kqx.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9slb000a1370yfz49kqx.html</id>
    <published>2019-10-21T11:32:14.000Z</published>
    <updated>2020-05-04T10:05:00.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在写项目的时候，感觉没有代码提示特别不爽，而且也容易出错，耗时耗力。遂找了一波关于laravel代码提示及补全工具，发现网上的文章都是通过<a href="https://github.com/barryvdh/laravel-ide-helper#automatic-phpdocs-for-models" target="_blank" rel="noopener">barryvdh/laravel-ide-helper</a>这个包生成的，我就自己配置了一下 ，感觉舒服了不少。但是还是有一个问题，就是每个项目里都得引用一下这个包，然后通过<code>php artisan</code>去生成提示文件，虽然可以通过<code>.gitignore</code>去让提交的时候忽略掉提示文件，但是每个项目都要这么走一遭，感觉比较鸡肋，所以就研究了一下<code>Phpstorm</code>的ide配置方法，发现可行，遂分享给大家。</p><h1 id="生成ide-helper文件"><a href="#生成ide-helper文件" class="headerlink" title="生成ide_helper文件"></a>生成ide_helper文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">➜  test_demo composer require barryvdh/laravel-ide-helper</span><br><span class="line"></span><br><span class="line">Using version ^2.6 for barryvdh/laravel-ide-helper</span><br><span class="line">./composer.json has been updated</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Package operations: 14 installs, 0 updates, 0 removals</span><br><span class="line">  - Installing doctrine/event-manager (v1.0.0): Downloading (100%)         </span><br><span class="line">  - Installing doctrine/cache (v1.8.0): Downloading (100%)         </span><br><span class="line">  - Installing doctrine/dbal (v2.9.2): Downloading (100%)         </span><br><span class="line">  - Installing composer/xdebug-handler (1.3.3): Downloading (100%)         </span><br><span class="line">  - Installing composer/spdx-licenses (1.5.2): Downloading (100%)         </span><br><span class="line">  - Installing symfony/filesystem (v4.3.5): Downloading (100%)         </span><br><span class="line">  - Installing justinrainbow/json-schema (5.2.9): Downloading (100%)         </span><br><span class="line">  - Installing seld/phar-utils (1.0.1): Downloading (100%)         </span><br><span class="line">  - Installing seld/jsonlint (1.7.1): Downloading (100%)         </span><br><span class="line">  - Installing composer/semver (1.5.0): Downloading (100%)         </span><br><span class="line">  - Installing composer/ca-bundle (1.2.4): Downloading (100%)         </span><br><span class="line">  - Installing composer/composer (1.9.0): Downloading (100%)         </span><br><span class="line">  - Installing barryvdh/reflection-docblock (v2.0.6): Downloading (100%)         </span><br><span class="line">  - Installing barryvdh/laravel-ide-helper (v2.6.5): Downloading (100%)         </span><br><span class="line">doctrine/cache suggests installing alcaeus/mongo-php-adapter (Required to use legacy MongoDB driver)</span><br><span class="line">barryvdh/reflection-docblock suggests installing dflydev/markdown (~1.0)</span><br><span class="line">Writing lock file</span><br><span class="line">Generating optimized autoload files</span><br><span class="line">&gt; Illuminate\Foundation\ComposerScripts::postAutoloadDump</span><br><span class="line">&gt; @php artisan package:discover --ansi</span><br><span class="line">Discovered Package: barryvdh/laravel-ide-helper</span><br><span class="line">Discovered Package: facade/ignition</span><br><span class="line">Discovered Package: fideloper/proxy</span><br><span class="line">Discovered Package: laravel/tinker</span><br><span class="line">Discovered Package: nesbot/carbon</span><br><span class="line">Discovered Package: nunomaduro/collision</span><br><span class="line">Package manifest generated successfully.</span><br></pre></td></tr></table></figure><p>修改<code>config/app.php</code>中的<code>providers</code>增加<code>Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Laravel Framework Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Illuminate\Auth\AuthServiceProvider::class,</span><br><span class="line">        Illuminate\Broadcasting\BroadcastServiceProvider::class,</span><br><span class="line">        Illuminate\Bus\BusServiceProvider::class,</span><br><span class="line">        Illuminate\Cache\CacheServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,</span><br><span class="line">        Illuminate\Cookie\CookieServiceProvider::class,</span><br><span class="line">        Illuminate\Database\DatabaseServiceProvider::class,</span><br><span class="line">        Illuminate\Encryption\EncryptionServiceProvider::class,</span><br><span class="line">        Illuminate\Filesystem\FilesystemServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\FoundationServiceProvider::class,</span><br><span class="line">        Illuminate\Hashing\HashServiceProvider::class,</span><br><span class="line">        Illuminate\Mail\MailServiceProvider::class,</span><br><span class="line">        Illuminate\Notifications\NotificationServiceProvider::class,</span><br><span class="line">        Illuminate\Pagination\PaginationServiceProvider::class,</span><br><span class="line">        Illuminate\Pipeline\PipelineServiceProvider::class,</span><br><span class="line">        Illuminate\Queue\QueueServiceProvider::class,</span><br><span class="line">        Illuminate\Redis\RedisServiceProvider::class,</span><br><span class="line">        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,</span><br><span class="line">        Illuminate\Session\SessionServiceProvider::class,</span><br><span class="line">        Illuminate\Translation\TranslationServiceProvider::class,</span><br><span class="line">        Illuminate\Validation\ValidationServiceProvider::class,</span><br><span class="line">        Illuminate\View\ViewServiceProvider::class,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Package Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Application Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        App\Providers\AppServiceProvider::class,</span><br><span class="line">        ...</span><br><span class="line">        Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p><code>php artisan vendor:publish</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  test_demo php artisan vendor:publish --provider=&quot;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&quot; --tag=config</span><br><span class="line">Copied File [/vendor/barryvdh/laravel-ide-helper/config/ide-helper.php] To [/config/ide-helper.php]</span><br><span class="line">Publishing complete.</span><br></pre></td></tr></table></figure><p><code>php artisan ide-helper:generate</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  test_demo php artisan ide-helper:generate</span><br><span class="line">A new helper file was written to _ide_helper.php</span><br></pre></td></tr></table></figure><p>此时生成的<code>_ide_helper.php</code>在项目根目录下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  test_demo tree -L 1</span><br><span class="line">.</span><br><span class="line">├── _ide_helper.php</span><br><span class="line">├── app</span><br><span class="line">├── artisan</span><br><span class="line">├── bootstrap</span><br><span class="line">├── composer.json</span><br><span class="line">├── composer.lock</span><br><span class="line">├── config</span><br><span class="line">├── database</span><br><span class="line">├── package.json</span><br><span class="line">├── phpunit.xml</span><br><span class="line">├── public</span><br><span class="line">├── resources</span><br><span class="line">├── routes</span><br><span class="line">├── server.php</span><br><span class="line">├── storage</span><br><span class="line">├── tests</span><br><span class="line">├── vendor</span><br><span class="line">├── webpack.mix.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>至此，<code>_ide_helper.php</code>生成完成</p><h1 id="PhpStorm集成-ide-helper-php"><a href="#PhpStorm集成-ide-helper-php" class="headerlink" title="PhpStorm集成_ide_helper.php"></a>PhpStorm集成_ide_helper.php</h1><p><code>_ide_helper.php</code>找一个地方放着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mkdir PhpstormHelper</span><br><span class="line">➜  ~ mv test/test_demo/_ide_helper.php PhpstormHelper/laravel_ide_helper.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191021200932.png" alt><br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191021201134.png" alt><br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191021201256.png" alt></p><p>修改后<br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191021201539.png" alt></p><p><strong>重点</strong></p><p><code>model提示需要在class上方加注释,如下</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">MustVerifyEmail</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App\User</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mixin</span> \Eloquent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注册的别名函数不用加，可以直接使用</code><br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191021225349.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天在写项目的时候，感觉没有代码提示特别不爽，而且也容易出错，耗时耗力。遂找了一波关于laravel代码提示及补全工具，发现网上的文章都是通
      
    
    </summary>
    
    
      <category term="编程ide" scheme="http://shiwenyuan.github.io/categories/%E7%BC%96%E7%A8%8Bide/"/>
    
    
      <category term="laravel" scheme="http://shiwenyuan.github.io/tags/laravel/"/>
    
      <category term="编程ide" scheme="http://shiwenyuan.github.io/tags/%E7%BC%96%E7%A8%8Bide/"/>
    
  </entry>
  
  <entry>
    <title>Laravelapi自定义response格式</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sl100001370l7ebqxsu.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sl100001370l7ebqxsu.html</id>
    <published>2019-10-09T03:35:47.000Z</published>
    <updated>2020-05-04T10:05:00.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http路由"><a href="#http路由" class="headerlink" title="http路由"></a>http路由</h1><p>laravel的http路由文件有两个<code>api.php</code>和<code>web.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ll /Users/shiwenyuan/test/test_demo/routes</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   6 shiwenyuan  staff  192 10  9 12:19 ./</span><br><span class="line">drwxr-xr-x  26 shiwenyuan  staff  832 10  9 10:29 ../</span><br><span class="line">-rw-r--r--   1 shiwenyuan  staff  572 10  9 12:19 api.php</span><br><span class="line">-rw-r--r--   1 shiwenyuan  staff  508 10  9 10:28 channels.php</span><br><span class="line">-rw-r--r--   1 shiwenyuan  staff  553 10  9 10:28 console.php</span><br><span class="line">-rw-r--r--   1 shiwenyuan  staff  453 10  9 10:35 web.php</span><br><span class="line">从命名上不难理解`web.php`为web服务的路由（用到了视图层），`api.php`则是做api服务(只负责返回数据)</span><br></pre></td></tr></table></figure><h1 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h1><p>直接在<code>app/Http/Controllers/Controller.php</code>中添加实现，然后因为所有控制器都集成了<code>Controller</code>，所以就会有他的所有public方法，但是这么写个人感觉不够优雅，与laravel的核心思想背道而驰,所以我就把相关实现放到了<code>Provider</code>中</p><h2 id="创建response服务供应者"><a href="#创建response服务供应者" class="headerlink" title="创建response服务供应者"></a>创建response服务供应者</h2><p><code>php artisan make:provider ResponseMacroServiceProvider</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////该命令会在app/Providers目录下生成ResponseMacroServiceProvider</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseMacroServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始文件格式如上</span></span><br></pre></td></tr></table></figure><h2 id="修改实现"><a href="#修改实现" class="headerlink" title="修改实现"></a>修改实现</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Error</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseMacroServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//error</span></span><br><span class="line">        Response::macro(<span class="string">'fail'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($err_code, $result=null, $msg=<span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (is_null($result))&#123;</span><br><span class="line">                $result = [];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($msg) &#123;</span><br><span class="line">                $err_msg = $msg;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $err_msg = Error::errMsg($err_code);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $response_data = [</span><br><span class="line">                <span class="string">'code'</span> =&gt; $err_code,</span><br><span class="line">                <span class="string">'message'</span> =&gt; $err_msg,</span><br><span class="line">                <span class="string">'timestamp'</span> =&gt; Carbon::now()-&gt;timestamp</span><br><span class="line">            ];</span><br><span class="line">            app(<span class="string">'log'</span>)-&gt;error(sprintf(<span class="string">'params [%s] response [%s]'</span>,</span><br><span class="line">                json_encode(request()-&gt;all(), JSON_UNESCAPED_UNICODE),</span><br><span class="line">                json_encode($response_data, JSON_UNESCAPED_UNICODE)</span><br><span class="line">            ));</span><br><span class="line">            <span class="keyword">return</span> Response::json($response_data);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//正常返回</span></span><br><span class="line">        Response::macro(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($result=null)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (is_null($result))&#123;</span><br><span class="line">                $result = [];</span><br><span class="line">            &#125;</span><br><span class="line">            $response_data = [</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="number">100</span>,</span><br><span class="line">                <span class="string">'content'</span> =&gt; $result,</span><br><span class="line">                <span class="string">'timestamp'</span> =&gt; Carbon::now()-&gt;timestamp</span><br><span class="line">            ];</span><br><span class="line">            app(<span class="string">'log'</span>)-&gt;debug(sprintf(<span class="string">'params [%s] response [%s]'</span>,</span><br><span class="line">                json_encode(request()-&gt;all(), JSON_UNESCAPED_UNICODE),</span><br><span class="line">                json_encode($response_data, JSON_UNESCAPED_UNICODE)</span><br><span class="line">            ));</span><br><span class="line">            <span class="keyword">return</span> Response::json($response_data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="App-Library-Error的实现"><a href="#App-Library-Error的实现" class="headerlink" title="App\Library\Error的实现"></a>App\Library\Error的实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: shiwenyuan</span></span><br><span class="line"><span class="comment"> * Date: 2019/10/9 13341007105@163.com</span></span><br><span class="line"><span class="comment"> * Time: 15:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Library</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">errMsg</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $maps = <span class="keyword">static</span>::getErrs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>($maps[$code]) ? $maps[$code] : <span class="string">'未知错误'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getErrs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'500'</span> =&gt; <span class="string">'服务器错误'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在全局服务提供者map中加入自己写的响应服务提供者"><a href="#在全局服务提供者map中加入自己写的响应服务提供者" class="headerlink" title="在全局服务提供者map中加入自己写的响应服务提供者"></a>在全局服务提供者map中加入自己写的响应服务提供者</h3><p>文件位置<code>config/app.php</code><br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191009154403.png" alt></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="增加测试路由"><a href="#增加测试路由" class="headerlink" title="增加测试路由"></a>增加测试路由</h3><p>文件路径：<code>routes/api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'test_success'</span>, <span class="string">'IndexController@testSuccess'</span>);</span><br><span class="line">Route::get(<span class="string">'test_fail'</span>, <span class="string">'IndexController@testFail'</span>);</span><br></pre></td></tr></table></figure><h3 id="增加测试实现"><a href="#增加测试实现" class="headerlink" title="增加测试实现"></a>增加测试实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSuccess</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;success([<span class="string">'username'</span>=&gt;<span class="string">'shiwenyuan'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;fail(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><h4 id="success"><a href="#success" class="headerlink" title="success"></a>success</h4><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191009163549.png" alt></p><h4 id="fail"><a href="#fail" class="headerlink" title="fail"></a>fail</h4><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/20191009163620.png" alt></p><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /Users/shiwenyuan/test/test_demo/storage/logs/laravel-2019-10-09.log</span><br><span class="line">[2019-10-09 07:39:02] local.DEBUG: params [&#123;&quot;query&quot;:&quot;index&quot;&#125;] response [&#123;&quot;code&quot;:100,&quot;content&quot;:&#123;&quot;username&quot;:&quot;shiwenyuan&quot;&#125;,&quot;timestamp&quot;:1570606742&#125;]  </span><br><span class="line">[2019-10-09 07:39:05] local.ERROR: params [&#123;&quot;query&quot;:&quot;index&quot;&#125;] response [&#123;&quot;code&quot;:500,&quot;message&quot;:&quot;服务器错误&quot;,&quot;timestamp&quot;:1570606745&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http路由&quot;&gt;&lt;a href=&quot;#http路由&quot; class=&quot;headerlink&quot; title=&quot;http路由&quot;&gt;&lt;/a&gt;http路由&lt;/h1&gt;&lt;p&gt;laravel的http路由文件有两个&lt;code&gt;api.php&lt;/code&gt;和&lt;code&gt;web.php&lt;
      
    
    </summary>
    
    
      <category term="php" scheme="http://shiwenyuan.github.io/categories/php/"/>
    
    
      <category term="laravel" scheme="http://shiwenyuan.github.io/tags/laravel/"/>
    
      <category term="php" scheme="http://shiwenyuan.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Php-将变量输出成array结构</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sl800061370yfs2lzhv.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sl800061370yfs2lzhv.html</id>
    <published>2019-09-11T11:26:15.000Z</published>
    <updated>2019-09-16T02:49:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天写需求的时候遇到个问题，前端给了我一段json，需要我配置到php项目里面，而我则需要去把它变成array。虽然用的时候可以直接json_decode但是感觉还是会损失一定的性能，而一个个去改的话又觉得很麻烦，所以写了一段下面的代码，可以让json自动转换成array，这样配置的时候可以直接cp输出内容去配置，用起来也比较方便</p><h1 id="outPutArray"><a href="#outPutArray" class="headerlink" title="outPutArray"></a>outPutArray</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: shiwenyuan</span></span><br><span class="line"><span class="comment"> * Date: 2019/9/11 13341007105@163.com</span></span><br><span class="line"><span class="comment"> * Time: 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把array或json以array字符串的形式输出 等同于var_export</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">outPutArray</span><span class="params">($str)</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string($str)) &#123;</span><br><span class="line">            $arr = json_decode($str, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (is_null($arr)) &#123;</span><br><span class="line">                $ret_str = <span class="string">''</span>;</span><br><span class="line">                <span class="keyword">if</span> (is_numeric($str)) &#123;</span><br><span class="line">                    $ret_str .= <span class="string">'['</span> .PHP_EOL. $str .PHP_EOL. <span class="string">']'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $ret_str .= <span class="string">'['</span> .PHP_EOL. <span class="string">'\''</span>.$str .<span class="string">'\''</span>.PHP_EOL. <span class="string">']'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> $ret_str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $arr = $str;</span><br><span class="line">        &#125;</span><br><span class="line">        $str = <span class="string">'['</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($key)) &#123;</span><br><span class="line">                $str .= <span class="string">"'&#123;$key&#125;' =&gt; "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                $str .= <span class="keyword">self</span>::outPutArray($value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_string($value)) &#123;</span><br><span class="line">                    $str .= <span class="string">"'&#123;$value&#125;',"</span> . PHP_EOL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $str .= <span class="string">"&#123;$value&#125;,"</span> . PHP_EOL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $str .= <span class="string">'],'</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> Utils::outPutArray(<span class="string">'shiwenyuan'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * 'shiwenyuan'</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">echo</span> Utils::outPutArray([<span class="string">'name'</span>=&gt;<span class="string">'zhangsan'</span>, <span class="string">'age'</span>=&gt;<span class="number">18</span>, <span class="string">'friend'</span>=&gt;[[<span class="string">'name'</span>=&gt;<span class="string">'lisi'</span>, <span class="string">'age'</span>=&gt;<span class="number">19</span>], [<span class="string">'name'</span>=&gt;<span class="string">'wangwu'</span>, <span class="string">'age'</span>=&gt;<span class="number">20</span>]]]);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *'name' =&gt; 'zhangsan',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 18,</span></span><br><span class="line"><span class="comment"> * 'friend' =&gt; [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * 'name' =&gt; 'lisi',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 19,</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * 'name' =&gt; 'wangwu',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 20,</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">echo</span> Utils::outPutArray(<span class="string">'&#123;"name":"zhangsan","age":18,"friend":[&#123;"name":"lisi","age":19&#125;,&#123;"name":"wangwu","age":21&#125;]&#125;'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *'name' =&gt; 'zhangsan',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 18,</span></span><br><span class="line"><span class="comment"> * 'friend' =&gt; [</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * 'name' =&gt; 'lisi',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 19,</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> * 'name' =&gt; 'wangwu',</span></span><br><span class="line"><span class="comment"> * 'age' =&gt; 20,</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * ],</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天写需求的时候遇到个问题，前端给了我一段json，需要我配置到php项目里面，而我则需要去把它变成array。虽然用的时候可以直接json
      
    
    </summary>
    
    
      <category term="代码片段" scheme="http://shiwenyuan.github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="代码片段" scheme="http://shiwenyuan.github.io/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置移动端和电脑端自动双向跳转</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sl500021370svmsv28j.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sl500021370svmsv28j.html</id>
    <published>2019-09-04T08:49:04.000Z</published>
    <updated>2019-09-10T08:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><table><thead><tr><th>端</th><th>域名</th><th>描述</th></tr></thead><tbody><tr><td>pc端</td><td><a href="http://www.phpblog.com.cn" target="_blank" rel="noopener">www.phpblog.com.cn</a></td><td>用于pc端访问官网</td></tr><tr><td>移动端</td><td>m.phpblog.com.cn</td><td>用于移动端访问</td></tr></tbody></table><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在移动端访问www.phpblog.com.cn和m.phpblog.com.cn都跳转到m.phpblog.com.cn</span><br></pre></td></tr></table></figure><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">判断客户端的设备类型</span><br><span class="line">要想让网站适配PC和手机设备，首先要能做出准确的判断。HTTP请求的Header中的User-Agent可以区分客户端的浏览器类型，可以通过User-Agent来判断客户端的设备。</span><br></pre></td></tr></table></figure><h2 id="nginx原始配置"><a href="#nginx原始配置" class="headerlink" title="nginx原始配置"></a>nginx原始配置</h2><h3 id="pc配置"><a href="#pc配置" class="headerlink" title="pc配置"></a>pc配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.phpblog.com.cn;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   www;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动端配置"><a href="#移动端配置" class="headerlink" title="移动端配置"></a>移动端配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  m.phpblog.com.cn;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   m;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="m-index-html"><a href="#m-index-html" class="headerlink" title="m/index.html"></a>m/index.html</h3><p><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb5e7e4a1e9b?w=2880&h=1800&f=png&s=205558" alt></p><h3 id="www-index-html"><a href="#www-index-html" class="headerlink" title="www/index.html"></a>www/index.html</h3><p><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb69f473591e?w=2880&h=1800&f=png&s=209791" alt></p><h2 id="nginx修改后配置"><a href="#nginx修改后配置" class="headerlink" title="nginx修改后配置"></a>nginx修改后配置</h2><h3 id="pc配置-1"><a href="#pc配置-1" class="headerlink" title="pc配置"></a>pc配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  www.phpblog.com.cn;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry))</span> &#123;</span><br><span class="line">      <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)</span>    http://m.phpblog.com.cn<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   www;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动端配置-1"><a href="#移动端配置-1" class="headerlink" title="移动端配置"></a>移动端配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  m.phpblog.com.cn;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> !<span class="regexp">~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry))</span> &#123;</span><br><span class="line">      <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)</span>    http://www.phpblog.com.cn<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>   m;</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>此时在pc访问m.phpblog.com.cn<br><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb5eb0f74e2d?w=2880&h=1800&f=png&s=303016" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到有两次http请求第一次请求m.phpblog.com.cn发生了一次重定向 ，重定向到到了www.phpblog.com.cn</span><br></pre></td></tr></table></figure><p>此时在pc访问<a href="http://www.phpblog.com.cn" target="_blank" rel="noopener">www.phpblog.com.cn</a><br><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb5ec00b5ee6?w=2880&h=1800&f=png&s=299142" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到有一次http请求第一次请求</span><br></pre></td></tr></table></figure><p>此时在移动端访问m.phpblog.com.cn<br><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb5ee105304e?w=2880&h=1800&f=png&s=303040" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到有一次http请求第一次请求</span><br></pre></td></tr></table></figure><p>此时在移动端访问<a href="http://www.phpblog.com.cn" target="_blank" rel="noopener">www.phpblog.com.cn</a><br><img src="https://user-gold-cdn.xitu.io/2019/9/4/16cfcb6a394f8d12?w=2880&h=1800&f=png&s=318660" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到有两次http请求第一次请求www.phpblog.com.cn发生了一次重定向,，重定向到到了 m.phpblog.com.cn</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx 利用每次http请求过来的浏览器ua来区分是移动端还是pc，然后做相应的跳转</span><br></pre></td></tr></table></figure><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><p><a href="https://ziyuan.baidu.com/college/courseinfo?id=156" target="_blank" rel="noopener">百度的官方建议</a><br><a href="http://detectmobilebrowsers.com/" target="_blank" rel="noopener">国外开源的通过User-Agent区分PC和手机的解决方案</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端&lt;/th&gt;
&lt;th&gt;域名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://shiwenyuan.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://shiwenyuan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>分享一款图床工具PicGo</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9slg000j13703d7tuelx.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9slg000j13703d7tuelx.html</id>
    <published>2019-08-28T08:48:56.000Z</published>
    <updated>2020-05-04T10:03:06.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p><p><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener">摘选自百度百科</a></p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>就是专门用来存放图片，同时允许你把图片对外连接的网上空间，不少图床都是免费的。</p><p><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener">摘选自百度百科</a></p><h1 id="为什么用图床工具"><a href="#为什么用图床工具" class="headerlink" title="为什么用图床工具"></a>为什么用图床工具</h1><p>近年来越来越多的博客支持markdown文档，但是其中想要插入图片的话却只能插入图片的链接。大的技术分享网站都会支持图片的复制自动上传(比如laravel-china,掘金，简书…)，但是为了防止盗取流量，一般都配置的有防盗链，如果你想在自己的博客网站上亦或者自己的笔记中使用的话，就不能满足了，只能存在第三方的对象存储中（自有服务器除外），而这些上传又比较麻烦，所以延伸出来了图床工具</p><h1 id="常见图床工具"><a href="#常见图床工具" class="headerlink" title="常见图床工具"></a>常见图床工具</h1><h2 id="iPic"><a href="#iPic" class="headerlink" title="iPic"></a>iPic</h2><p>默认上传到微博，不过有时会上传失败，但是别的方式都是需要收费才能开通，而且还都是需要去第三方实名认证之后。<br><img src="https://user-gold-cdn.xitu.io/2019/8/28/16cd6f23cbad893e?w=1168&h=1074&f=png&s=572536" alt></p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>此处我用的是github<br><img src="https://user-gold-cdn.xitu.io/2019/8/28/16cd6f23cc3f98a1?w=1600&h=900&f=png&s=126435" alt></p><h1 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h1><h2 id="sm-ms图床配置项"><a href="#sm-ms图床配置项" class="headerlink" title="sm.ms图床配置项"></a>sm.ms图床配置项</h2><p>此处不需要配置，只用去设置为默认图床即可<br><img src="https://user-gold-cdn.xitu.io/2019/8/28/16cd6f23cc4cae14?w=1600&h=900&f=png&s=98362" alt></p><h2 id="github图床配置项"><a href="#github图床配置项" class="headerlink" title="github图床配置项"></a>github图床配置项</h2><p><img src="https://user-gold-cdn.xitu.io/2019/8/28/16cd6f23cc8a2fee?w=1602&h=904&f=png&s=1235939" alt></p><p>其中带*为必填项</p><p>1、<strong>仓库名</strong>: 这个没有什么好说的，就是github仓库地址，比如我的图床仓库地址是github.com/shiwenyuan/pic  此处填写的就是shiwenyuan/pic</p><p>2、<strong>设定分支名称</strong>: 这个也没有什么好说的，就是github仓库地址的分支，此处我用的是master分支</p><p>3、<strong>设定token</strong>: token指的是你github账户的token(<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">token生成地址</a>,需注意一点：生成token时要☑️repo项，该项是允许提交代码库)，就是github仓库地址的分支，此处我用的是master分支</p><h2 id="其他图床配置项"><a href="#其他图床配置项" class="headerlink" title="其他图床配置项"></a>其他图床配置项</h2><p>基本就是在第三方平台上面注册一个账号，开通对象存储得到app_id,app_secret，然后配置到图床服务中即可</p><hr><p>至此已配置完成</p><h1 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h1><p><img src="https://user-gold-cdn.xitu.io/2019/8/28/16cd6f23cc81dc10?w=1606&h=906&f=png&s=1364401" alt><br>除了上图的两种方式，同时也支持拖拽到状态栏图标上传</p><p><code>ps</code>: 个人比较喜欢剪切板图片上传，代码截图不用保存到本地，之前上传一直都是<code>代码截图</code>-&gt;<code>保存到本地</code>-&gt;<code>上传到图床</code>-&gt;<code>删除截图文件</code>，现在就直接<code>代码截图</code>-&gt;<code>点击剪贴板上传</code>就可以了，中途不会产生多余的图片文件在自己的开发机上面。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>为<a href="https://github.com/Molunerfinn" target="_blank" rel="noopener">Molunerfinn</a>点赞</p><p>PicGo传送门: <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p><blockquote><p>原文出处: <a href="https://shiwenyuan.github.io/post/cjzwb8x8f0002ugs6yap15758.html">https://shiwenyuan.github.io/post/cjzwb8x8f0002ugs6yap15758.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是图床&quot;&gt;&lt;a href=&quot;#什么是图床&quot; class=&quot;headerlink&quot; title=&quot;什么是图床&quot;&gt;&lt;/a&gt;什么是图床&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
    
      <category term="系统工具" scheme="http://shiwenyuan.github.io/categories/%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="系统工具" scheme="http://shiwenyuan.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>每个 PHPer 都应当掌握的注释标记</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sll00101370hgjjz0a0.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sll00101370hgjjz0a0.html</id>
    <published>2019-08-27T08:48:48.000Z</published>
    <updated>2019-09-10T09:07:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>注释标签</strong>在代码注释中的作用非常大，好的找注释标签可以让你在编程过程中有更好、更舒适的体验，所以我今天准备整理一下这些标记，通过图文的形式展示出来，一方面是为了自己对这些注释标签有一个汇总整理，另一方面也希望大家能够更好对理解注释标签</p><p><strong>每个人都希望写出漂亮的代码，或许你离漂亮的代码，就差一个标签</strong></p><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><table><thead><tr><th>标记</th><th>用途</th><th>描述</th></tr></thead><tbody><tr><td>@abstract</td><td></td><td>抽象类的变量和方法</td></tr><tr><td>@access</td><td>public, private or protected</td><td>文档的访问、使用权限. @access private 表明这个文档是被保护的。</td></tr><tr><td>@author</td><td>张三 <a href="mailto:&#122;&#x68;&#x61;&#110;&#x67;&#x73;&#x61;&#110;&#x40;&#49;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#122;&#x68;&#x61;&#110;&#x67;&#x73;&#x61;&#110;&#x40;&#49;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a></td><td>文档作者</td></tr><tr><td>@copyright</td><td>名称 时间</td><td>文档版权信息</td></tr><tr><td>@deprecated</td><td>version</td><td>文档中被废除的方法</td></tr><tr><td>@deprec</td><td></td><td>同 @deprecated</td></tr><tr><td><a href="https://learnku.com/users/20807" target="_blank" rel="noopener">@example</a></td><td>/path/to/example</td><td>文档的外部保存的示例文件的位置。</td></tr><tr><td><a href="https://learnku.com/users/20296" target="_blank" rel="noopener">@exception</a></td><td></td><td>文档中方法抛出的异常，也可参照 @throws.</td></tr><tr><td>@global</td><td>类型：$globalvarname</td><td>文档中的全局变量及有关的方法和函数</td></tr><tr><td>@ignore</td><td></td><td>忽略文档中指定的关键字</td></tr><tr><td>@internal</td><td></td><td>开发团队内部信息</td></tr><tr><td>@link</td><td>URL</td><td>类似于license 但还可以通过link找到文档中的更多个详细的信息</td></tr><tr><td>@name</td><td>变量别名</td><td>为某个变量指定别名</td></tr><tr><td>@magic</td><td></td><td>phpdoc.de compatibility</td></tr><tr><td>@package</td><td>封装包的名称</td><td>一组相关类、函数封装的包名称</td></tr><tr><td>@param</td><td>如 $username 用户名</td><td>变量含义注释</td></tr><tr><td><a href="https://learnku.com/users/31554" target="_blank" rel="noopener">@return</a></td><td>如 返回bool</td><td>函数返回结果描述，一般不用在void（空返回结果的）的函数中</td></tr><tr><td>@see</td><td>如 Class Login()</td><td>文件关联的任何元素（全局变量，包括，页面，类，函数，定义，方法，变量）。</td></tr><tr><td>@since</td><td>version</td><td>记录什么时候对文档的哪些部分进行了更改</td></tr><tr><td>@static</td><td></td><td>记录静态类、方法</td></tr><tr><td>@staticvar</td><td></td><td>在类、函数中使用的静态变量</td></tr><tr><td>@subpackage</td><td></td><td>子版本</td></tr><tr><td>@throws</td><td></td><td>某一方法抛出的异常</td></tr><tr><td>@todo</td><td></td><td>表示文件未完成或者要完善的地方</td></tr><tr><td>@var</td><td>type</td><td>文档中的变量及其类型</td></tr><tr><td>@version</td><td></td><td>文档、类、函数的版本信息</td></tr></tbody></table><p>上面这么多其实很大一部分都是创建文件、创建类的时候需要添加的。今天主要讲解一下常用的标签。</p><h1 id="param"><a href="#param" class="headerlink" title="@param"></a>@param</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>参数，用于函数和方法注释里的标记<br>格式<code>@param [Type] [name] [&lt;description&gt;]</code><br>例如<code>@param string title 文章标题</code></p><h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/params.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="return"><a href="#return" class="headerlink" title="@return"></a><a href="https://learnku.com/users/31554" target="_blank" rel="noopener">@return</a></h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>返回值<br>格式<a href="https://learnku.com/users/31554" target="_blank" rel="noopener">@return</a> [类型] [&lt;描述&gt;]]<br>例如<a href="https://learnku.com/users/31554" target="_blank" rel="noopener">@return</a> array 结果数组</p><h2 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/return.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="deprecated"><a href="#deprecated" class="headerlink" title="@deprecated"></a>@deprecated</h1><h2 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h2><p>不建议使用的、已过期的、将被删除的<br>格式<code>@deprecated [&lt;版本号&gt;] [&lt;描述&gt;]</code><br>例如<code>@deprecated 1.0.0 新版本将不再包含此函数</code><br>如果它是被其他方法所取代了，建议添加<code>@see</code>标记</p><h2 id="代码举例-2"><a href="#代码举例-2" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/deprecated.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="see"><a href="#see" class="headerlink" title="@see"></a>@see</h1><h2 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h2><p>参考，类似@link，可与@deprecated联动<br>格式@see [url或完整方法名] [&lt;描述&gt;]<br>例如@see \yii\base\db::tableName() 旧方法table_name已弃用，请使用此方法替代</p><h2 id="代码举例-3"><a href="#代码举例-3" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/see.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="link"><a href="#link" class="headerlink" title="@link"></a>@link</h1><h2 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h2><p>链接，可用于辅助说明、引用文档等<br>格式<code>@link [url] [&lt;描述&gt;]</code><br>例如<code>@link http://g.cn 不懂滚去问谷歌，别来烦我</code></p><h2 id="代码举例-4"><a href="#代码举例-4" class="headerlink" title="代码举例"></a>代码举例</h2><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/link.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="link-amp-see区别"><a href="#link-amp-see区别" class="headerlink" title="@link&amp;@see区别"></a>@link&amp;@see区别</h1><table><thead><tr><th>-</th><th>@see</th><th>@link</th></tr></thead><tbody><tr><td>外部链接</td><td>√</td><td>√</td></tr><tr><td>内部程序</td><td>√</td><td>X</td></tr></tbody></table><h1 id="var"><a href="#var" class="headerlink" title="@var"></a>@var</h1><h2 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h2><p>变量<br>格式<code>@var [类型] [变量名] [&lt;描述&gt;]</code><br>例如<code>@var int id 用户id</code></p><h1 id="变量列表"><a href="#变量列表" class="headerlink" title="变量列表"></a>变量列表</h1><table><thead><tr><th>变量类型</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>字符串</td></tr><tr><td>integer/int</td><td>number/int类型</td></tr><tr><td>boolean/bool</td><td>false/true</td></tr><tr><td>float/double</td><td>number/浮点数</td></tr><tr><td>object</td><td>对象实例</td></tr><tr><td>specifiedType</td><td>指定类</td></tr><tr><td>mixed</td><td>任意类型</td></tr><tr><td>array/specifiedType[]</td><td>数组，可以指定成指定类型的数组</td></tr><tr><td>resource</td><td>文件资源类型</td></tr><tr><td>void</td><td>无返回值</td></tr><tr><td>null</td><td>-</td></tr><tr><td>callable</td><td>可执行的回调函数</td></tr><tr><td>function</td><td>不一定能执行的方法</td></tr><tr><td>self/$this</td><td>当前实例</td></tr></tbody></table><h2 id="代码举例-5"><a href="#代码举例-5" class="headerlink" title="代码举例"></a>代码举例</h2><p>1、在方法外的变量定义<br><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/var1.png" alt="每个PHPer都应当掌握的注释标记"><br>2、在方法内的变量定义</p><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/var2.png" alt="每个PHPer都应当掌握的注释标记"></p><h1 id="throws"><a href="#throws" class="headerlink" title="@throws"></a>@throws</h1><h2 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h2><p>可能会抛出的错误类型<br>格式<code>@throws [类型] [&lt;描述&gt;]</code><br>例如<code>@throws Exception</code></p><p><img src="https://raw.githubusercontent.com/shiwenyuan/pic/master/throws.png" alt="每个PHPer都应当掌握的注释标记"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注释标签&lt;/strong&gt;在代码注释中的作用非常大，好的找注释标签可以让你在编程过程中有更好、更舒适的体验，所以我今天准备整
      
    
    </summary>
    
    
      <category term="代码规范" scheme="http://shiwenyuan.github.io/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="php" scheme="http://shiwenyuan.github.io/tags/php/"/>
    
      <category term="代码规范" scheme="http://shiwenyuan.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm集成PlantUML</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sla00081370br0opvnn.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sla00081370br0opvnn.html</id>
    <published>2019-08-23T08:48:36.000Z</published>
    <updated>2019-09-10T08:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作到现在一直在一味的去学习、去工作、去coding，从而忽略了对自己对技能的总结。近来工作比较清闲，所以就准备把自己的作为程序员的技能栈好好梳理一下，就先从设计模式开始了！！！</p><h1 id="设计模式相关文章内容构想"><a href="#设计模式相关文章内容构想" class="headerlink" title="设计模式相关文章内容构想"></a>设计模式相关文章内容构想</h1><ul><li><code>该设计模式的应用场景</code></li><li><code>该设计模式的uml图</code></li><li><code>该设计模式的代码实现</code></li></ul><blockquote><p>相关代码届时会放到<a href="https://github.com/shiwenyuan/designPatterns" target="_blank" rel="noopener">github</a><br>提到了uml、市面上可以画uml图的工具有很多，诸如starUML、<a href="http://www.plantuml.com" target="_blank" rel="noopener">plantuml</a>… 但是我还是更喜欢在PhpStorm里面去操作</p></blockquote><h1 id="phpstrom插件下载"><a href="#phpstrom插件下载" class="headerlink" title="phpstrom插件下载"></a>phpstrom插件下载</h1><p>PhpStrom-&gt;Perferences-&gt;Plugins-&gt;搜索PlantUML-&gt;install(位置是在下图的Restart PhpStorm，此处我是install了之后，显示让我从启动的，哈哈哈哈哈)<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25f87d03204?w=1082&h=706&f=jpeg&s=93001" alt><br>下载成功之后点击上图位置的Restart PhpStorm，重新打开之后点击创建文件，这时就会出现uml相关文件的创建<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25f80e86fdd?w=726&h=630&f=jpeg&s=55632" alt></p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>创建uml class，这时发现右侧的显示时一段error提示，大致意思就是需要装一个graphviz软件<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25f898ae57d?w=1918&h=1076&f=jpeg&s=111217" alt></p><h2 id="安装graphviz"><a href="#安装graphviz" class="headerlink" title="安装graphviz"></a>安装graphviz</h2><p>我是本机是<code>mac</code>所以我用<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>,<code>windows</code>用户需自己找一下exe文件安装，此处不一一赘述<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25f891de3a4?w=1109&h=824&f=jpeg&s=258365" alt><br>安装成功后找到安装包可执行文件位置配置Phpstrom<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25f817bf733?w=1910&h=500&f=jpeg&s=124540" alt><br>此处我的安装包可执行文件位置就是<code>/usr/local/bin/dot</code></p><h2 id="配置phpstrom"><a href="#配置phpstrom" class="headerlink" title="配置phpstrom"></a>配置phpstrom</h2><p><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25fae9ec8cc?w=1025&h=698&f=jpeg&s=46198" alt><br>回到原uml文件点击刷新、大功告成<br><img src="https://user-gold-cdn.xitu.io/2019/8/23/16cbd25fd1dea595?w=1920&h=1080&f=jpeg&s=105157" alt></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="http://plantuml.com/zh/class-diagram" target="_blank" rel="noopener">plantuml语法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作到现在一直在一味的去学习、去工作、去coding，从而忽略了对自己对技能的总结。近来工作比较清闲，所以就准备把自己的作为程序员的技能栈好
      
    
    </summary>
    
    
      <category term="编程ide" scheme="http://shiwenyuan.github.io/categories/%E7%BC%96%E7%A8%8Bide/"/>
    
    
      <category term="编程ide" scheme="http://shiwenyuan.github.io/tags/%E7%BC%96%E7%A8%8Bide/"/>
    
  </entry>
  
  <entry>
    <title>PHP-代码整洁之道</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sle000f13706qhl1g0j.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sle000f13706qhl1g0j.html</id>
    <published>2019-08-19T08:48:42.000Z</published>
    <updated>2019-09-10T09:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>文章出处 <a href="https://github.com/php-cpm/clean-code-php" target="_blank" rel="noopener">https://github.com/php-cpm/clean-code-php</a></p></blockquote><h1 id="Clean-Code-PHP"><a href="#Clean-Code-PHP" class="headerlink" title="Clean Code PHP"></a>Clean Code PHP</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#介绍">介绍</a></li><li><a href="#变量">变量</a><ul><li><a href="#使用见字知意的变量名">使用见字知意的变量名</a></li><li><a href="#同一个实体要用相同的变量名">同一个实体要用相同的变量名</a></li><li><a href="#使用便于搜索的名称-part-1">使用便于搜索的名称 (part 1)</a></li><li><a href="#使用便于搜索的名称-part-2">使用便于搜索的名称 (part 2)</a></li><li><a href="#使用自解释型变量">使用自解释型变量</a></li><li><a href="#避免深层嵌套尽早返回-part-1">避免深层嵌套，尽早返回 (part 1)</a></li><li><a href="#避免深层嵌套尽早返回-part-2">避免深层嵌套，尽早返回 (part 2)</a></li><li><a href="#少用无意义的变量名">少用无意义的变量名</a></li><li><a href="#不要添加不必要上下文">不要添加不必要上下文</a></li><li><a href="#合理使用参数默认值没必要在方法里再做默认值检测">合理使用参数默认值，没必要在方法里再做默认值检测</a></li></ul></li><li><a href="#表达式">表达式</a><ul><li><a href="#使用恒等式">使用恒等式</a></li></ul></li><li><a href="#函数">函数</a><ul><li><a href="#函数参数-最好少于2个">函数参数（最好少于2个）</a></li><li><a href="#函数应该只做一件事">函数应该只做一件事</a></li><li><a href="#函数名应体现他做了什么事">函数名应体现他做了什么事</a></li><li><a href="#函数里应当只有一层抽象abstraction">函数里应当只有一层抽象abstraction</a></li><li><a href="#不要用flag作为函数的参数">不要用flag作为函数的参数</a></li><li><a href="#避免副作用">避免副作用</a></li><li><a href="#不要写全局函数">不要写全局函数</a></li><li><a href="#不要使用单例模式">不要使用单例模式</a></li><li><a href="#封装条件语句">封装条件语句</a></li><li><a href="#避免用反义条件判断">避免用反义条件判断</a></li><li><a href="#避免条件判断">避免条件判断</a></li><li><a href="#避免类型检查-part-1">避免类型检查 (part 1)</a></li><li><a href="#避免类型检查-part-2">避免类型检查 (part 2)</a></li><li><a href="#移除僵尸代码">移除僵尸代码</a></li></ul></li><li><a href="#对象和数据结构">对象和数据结构 Objects and Data Structures</a><ul><li><a href="#使用-getters-和-setters">使用 getters 和 setters Use object encapsulation</a></li><li><a href="#给对象使用私有或受保护的成员变量">给对象使用私有或受保护的成员变量</a></li></ul></li><li><a href="#类">类</a><ul><li><a href="#少用继承多用组合">少用继承多用组合</a></li><li><a href="#避免连贯接口">避免连贯接口</a></li><li><a href="#推荐使用-final-类">推荐使用 final 类</a></li></ul></li><li><a href="#solid">类的SOLID原则 SOLID</a><ul><li><a href="#单一职责原则">S: 单一职责原则 Single Responsibility Principle (SRP)</a></li><li><a href="#开闭原则">O: 开闭原则 Open/Closed Principle (OCP)</a></li><li><a href="#里氏替换原则">L: 里氏替换原则 Liskov Substitution Principle (LSP)</a></li><li><a href="#接口隔离原则">I: 接口隔离原则 Interface Segregation Principle (ISP)</a></li><li><a href="#依赖倒置原则">D: 依赖倒置原则 Dependency Inversion Principle (DIP)</a></li></ul></li><li><a href="#别写重复代码-dry">别写重复代码 (DRY)</a></li><li><a href="#翻译">翻译</a></li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文参考自 Robert C. Martin的<a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="noopener"><em>Clean Code</em></a>  书中的软件工程师的原则<br>,适用于PHP。 这不是风格指南。 这是一个关于开发可读、可复用并且可重构的PHP软件指南。</p><p>并不是这里所有的原则都得遵循，甚至很少的能被普遍接受。 这些虽然只是指导，但是都是<em>Clean Code</em>作者多年总结出来的。</p><p>本文受到 <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">clean-code-javascript</a> 的启发</p><p>虽然很多开发者还在使用PHP5，但是本文中的大部分示例的运行环境需要PHP 7.1+。</p><h2 id="翻译说明"><a href="#翻译说明" class="headerlink" title="翻译说明"></a>翻译说明</h2><p>翻译完成度100%，最后更新时间2017-12-25。本文由 php-cpm 基于 <a href="https://github.com/yangweijie/clean-code-php" target="_blank" rel="noopener">yangweijie版本</a> 的<a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="noopener">clean-code-php</a>翻译并同步大量原文内容。</p><p>原文更新频率较高，我的翻译方法是直接用文本比较工具逐行对比。优先保证文字内容是最新的，再逐步提升翻译质量。</p><p>阅读过程中如果遇到各种链接失效、内容老旧、术语使用错误和其他翻译错误等问题，欢迎大家积极提交PR。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="使用见字知意的变量名"><a href="#使用见字知意的变量名" class="headerlink" title="使用见字知意的变量名"></a>使用见字知意的变量名</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ymdstr = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$currentDate = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="同一个实体要用相同的变量名"><a href="#同一个实体要用相同的变量名" class="headerlink" title="同一个实体要用相同的变量名"></a>同一个实体要用相同的变量名</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo();</span><br><span class="line">getUserData();</span><br><span class="line">getUserRecord();</span><br><span class="line">getUserProfile();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUser();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="使用便于搜索的名称-part-1"><a href="#使用便于搜索的名称-part-1" class="headerlink" title="使用便于搜索的名称 (part 1)"></a>使用便于搜索的名称 (part 1)</h3><p>写代码是用来读的。所以写出可读性高、便于搜索的代码至关重要。<br>命名变量时如果没有有意义、不好理解，那就是在伤害读者。<br>请让你的代码便于搜索。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// What the heck is 448 for?</span></span><br><span class="line">$result = $serializer-&gt;serialize($data, <span class="number">448</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$json = $serializer-&gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);</span><br></pre></td></tr></table></figure><h3 id="使用便于搜索的名称-part-2"><a href="#使用便于搜索的名称-part-2" class="headerlink" title="使用便于搜索的名称 (part 2)"></a>使用便于搜索的名称 (part 2)</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// What the heck is 4 for?</span></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_READ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_CREATE = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_UPDATE = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_DELETE = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; User::ACCESS_UPDATE) &#123;</span><br><span class="line">    <span class="comment">// do edit ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="使用自解释型变量"><a href="#使用自解释型变量" class="headerlink" title="使用自解释型变量"></a>使用自解释型变量</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(.+?)\s*(\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">saveCityZipCode($matches[<span class="number">1</span>], $matches[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p><strong>不错:</strong></p><p>好一些，但强依赖于正则表达式的熟悉程度</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(.+?)\s*(\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">[, $city, $zipCode] = $matches;</span><br><span class="line">saveCityZipCode($city, $zipCode);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>使用带名字的子规则，不用懂正则也能看的懂</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(?&lt;city&gt;.+?)\s*(?&lt;zipCode&gt;\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">saveCityZipCode($matches[<span class="string">'city'</span>], $matches[<span class="string">'zipCode'</span>]);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免深层嵌套，尽早返回-part-1"><a href="#避免深层嵌套，尽早返回-part-1" class="headerlink" title="避免深层嵌套，尽早返回 (part 1)"></a>避免深层嵌套，尽早返回 (part 1)</h3><p>太多的if else语句通常会导致你的代码难以阅读，直白优于隐晦</p><p><strong>糟糕:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($day) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string($day)) &#123;</span><br><span class="line">            $day = strtolower($day);</span><br><span class="line">            <span class="keyword">if</span> ($day === <span class="string">'friday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'saturday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'sunday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">(string $day)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($day)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $openingDays = [</span><br><span class="line">        <span class="string">'friday'</span>, <span class="string">'saturday'</span>, <span class="string">'sunday'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> in_array(strtolower($day), $openingDays, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免深层嵌套，尽早返回-part-2"><a href="#避免深层嵌套，尽早返回-part-2" class="headerlink" title="避免深层嵌套，尽早返回 (part 2)"></a>避免深层嵌套，尽早返回 (part 2)</h3><p><strong>糟糕的:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(int $n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($n !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($n !== <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(int $n)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n === <span class="number">0</span> || $n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($n &gt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Not supported'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="少用无意义的变量名"><a href="#少用无意义的变量名" class="headerlink" title="少用无意义的变量名"></a>少用无意义的变量名</h3><p>别让读你的代码的人猜你写的变量是什么意思。<br>写清楚好过模糊不清。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$l = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($l); $i++) &#123;</span><br><span class="line">    $li = $l[$i];</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 等等, `$li` 又代表什么?</span></span><br><span class="line">    dispatch($li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($locations <span class="keyword">as</span> $location) &#123;</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dispatch($location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要添加不必要上下文"><a href="#不要添加不必要上下文" class="headerlink" title="不要添加不必要上下文"></a>不要添加不必要上下文</h3><p>如果从你的类名、对象名已经可以得知一些信息，就别再在变量名里重复。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $carMake;</span><br><span class="line">    <span class="keyword">public</span> $carModel;</span><br><span class="line">    <span class="keyword">public</span> $carColor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $make;</span><br><span class="line">    <span class="keyword">public</span> $model;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="合理使用参数默认值，没必要在方法里再做默认值检测"><a href="#合理使用参数默认值，没必要在方法里再做默认值检测" class="headerlink" title="合理使用参数默认值，没必要在方法里再做默认值检测"></a>合理使用参数默认值，没必要在方法里再做默认值检测</h3><p><strong>不好:</strong></p><p>不好，<code>$breweryName</code> 可能为 <code>NULL</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">($breweryName = <span class="string">'Hipster Brew Co.'</span>)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还行:</strong></p><p>比上一个好理解一些，但最好能控制变量的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">($name = null)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breweryName = $name ?: <span class="string">'Hipster Brew Co.'</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>如果你的程序只支持 PHP 7+, 那你可以用 <a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noopener">type hinting</a> 保证变量 <code>$breweryName</code> 不是 <code>NULL</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">(string $breweryName = <span class="string">'Hipster Brew Co.'</span>)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="使用恒等式"><a href="#使用恒等式" class="headerlink" title="使用恒等式"></a><a href="http://php.net/manual/en/language.operators.comparison.php" target="_blank" rel="noopener">使用恒等式</a></h3><p><strong>不好:</strong></p><p>简易对比会将字符串转为整形</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">'42'</span>;</span><br><span class="line">$b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $a != $b ) &#123;</span><br><span class="line">   <span class="comment">//这里始终执行不到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比 $a != $b 返回了 <code>FALSE</code> 但应该返回 <code>TRUE</code> !<br>字符串 ‘42’ 跟整数 42 不相等</p><p><strong>好:</strong></p><p>使用恒等判断检查类型和数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">'42'</span>;</span><br><span class="line">$b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a !== $b) &#123;</span><br><span class="line">    <span class="comment">// The expression is verified</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The comparison <code>$a !== $b</code> returns <code>TRUE</code>.</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数（最好少于2个）"><a href="#函数参数（最好少于2个）" class="headerlink" title="函数参数（最好少于2个）"></a>函数参数（最好少于2个）</h3><p>限制函数参数个数极其重要，这样测试你的函数容易点。有超过3个可选参数参数导致一个爆炸式组合增长，你会有成吨独立参数情形要测试。</p><p>无参数是理想情况。1个或2个都可以，最好避免3个。再多就需要加固了。通常如果你的函数有超过两个参数，说明他要处理的事太多了。 如果必须要传入很多数据，建议封装一个高级别对象作为参数。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">(string $title, string $body, string $buttonText, bool $cancellable)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $body;</span><br><span class="line">    <span class="keyword">public</span> $buttonText;</span><br><span class="line">    <span class="keyword">public</span> $cancellable = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$config = <span class="keyword">new</span> MenuConfig();</span><br><span class="line">$config-&gt;title = <span class="string">'Foo'</span>;</span><br><span class="line">$config-&gt;body = <span class="string">'Bar'</span>;</span><br><span class="line">$config-&gt;buttonText = <span class="string">'Baz'</span>;</span><br><span class="line">$config-&gt;cancellable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">(MenuConfig $config)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="函数应该只做一件事"><a href="#函数应该只做一件事" class="headerlink" title="函数应该只做一件事"></a>函数应该只做一件事</h3><p>这是迄今为止软件工程里最重要的一个规则。当一个函数做超过一件事的时候，他们就难于实现、测试和理解。当你把一个函数拆分到只剩一个功能时，他们就容易被重构，然后你的代码读起来就更清晰。如果你光遵循这条规则，你就领先于大多数开发者了。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">(array $clients)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($clients <span class="keyword">as</span> $client) &#123;</span><br><span class="line">        $clientRecord = $db-&gt;find($client);</span><br><span class="line">        <span class="keyword">if</span> ($clientRecord-&gt;isActive()) &#123;</span><br><span class="line">            email($client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">(array $clients)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $activeClients = activeClients($clients);</span><br><span class="line">    array_walk($activeClients, <span class="string">'email'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">activeClients</span><span class="params">(array $clients)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_filter($clients, <span class="string">'isClientActive'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span><span class="params">(int $client)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $clientRecord = $db-&gt;find($client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $clientRecord-&gt;isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="函数名应体现他做了什么事"><a href="#函数名应体现他做了什么事" class="headerlink" title="函数名应体现他做了什么事"></a>函数名应体现他做了什么事</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">// 啥？handle处理一个消息干嘛了？是往一个文件里写吗？</span></span><br><span class="line">$message-&gt;handle();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">// 简单明了</span></span><br><span class="line">$message-&gt;send();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="函数里应当只有一层抽象abstraction"><a href="#函数里应当只有一层抽象abstraction" class="headerlink" title="函数里应当只有一层抽象abstraction"></a>函数里应当只有一层抽象abstraction</h3><p>当你抽象层次过多时时，函数处理的事情太多了。需要拆分功能来提高可重用性和易用性，以便简化测试。<br>（译者注：这里从示例代码看应该是指嵌套过多）</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        <span class="comment">// lex...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// parse...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>坏:</strong></p><p>我们把一些方法从循环中提取出来，但是<code>parseBetterJSAlternative()</code>方法还是很复杂，而且不利于测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">(string $code)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span><span class="params">(array $tokens)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tokens = tokenize($code);</span><br><span class="line">    $ast = lexer($tokens);</span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// 解析逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>最好的解决方案是把 <code>parseBetterJSAlternative()</code>方法的依赖移除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">(string $code)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $regexes = [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">        $tokens = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">                $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $tokens;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lexer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lexify</span><span class="params">(array $tokens)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ast = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">            $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $ast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BetterJSAlternative</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $tokenizer;</span><br><span class="line">    <span class="keyword">private</span> $lexer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Tokenizer $tokenizer, Lexer $lexer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tokenizer = $tokenizer;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lexer = $lexer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tokens = <span class="keyword">$this</span>-&gt;tokenizer-&gt;tokenize($code);</span><br><span class="line">        $ast = <span class="keyword">$this</span>-&gt;lexer-&gt;lexify($tokens);</span><br><span class="line">        <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">            <span class="comment">// 解析逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们可以对依赖做mock，并测试<code>BetterJSAlternative::parse()</code>运行是否符合预期。</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要用flag作为函数的参数"><a href="#不要用flag作为函数的参数" class="headerlink" title="不要用flag作为函数的参数"></a>不要用flag作为函数的参数</h3><p>flag就是在告诉大家，这个方法里处理很多事。前面刚说过，一个函数应当只做一件事。 把不同flag的代码拆分到多个函数里。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">(string $name, bool $temp = false)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($temp) &#123;</span><br><span class="line">        touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        touch($name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">(string $name)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span><span class="params">(string $name)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h3><p>一个函数做了比获取一个值然后返回另外一个值或值们会产生副作用如果。副作用可能是写入一个文件，修改某些全局变量或者偶然的把你全部的钱给了陌生人。</p><p>现在，你的确需要在一个程序或者场合里要有副作用，像之前的例子，你也许需要写一个文件。你想要做的是把你做这些的地方集中起来。不要用几个函数和类来写入一个特定的文件。用一个服务来做它，一个只有一个。</p><p>重点是避免常见陷阱比如对象间共享无结构的数据，使用可以写入任何的可变数据类型，不集中处理副作用发生的地方。如果你做了这些你就会比大多数程序员快乐。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $name;</span><br><span class="line"></span><br><span class="line">    $name = explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoFirstAndLastName();</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">(string $name)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line">$newName = splitIntoFirstAndLastName($name);</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// 'Ryan McDermott';</span></span><br><span class="line">var_dump($newName); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在大多数语言中污染全局变量是一个坏的实践，因为你可能和其他类库冲突<br>并且调用你api的人直到他们捕获异常才知道踩坑了。让我们思考一种场景：<br>如果你想配置一个数组，你可能会写一个全局函数<code>config()</code>，但是他可能<br>和试着做同样事的其他类库冲突。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">()</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  [</span><br><span class="line">        <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $configuration = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $configuration)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;configuration = $configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(string $key)</span>: ?<span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;configuration[$key]) ? <span class="keyword">$this</span>-&gt;configuration[$key] : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载配置并创建 <code>Configuration</code> 类的实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$configuration = <span class="keyword">new</span> Configuration([</span><br><span class="line">    <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>现在你必须在程序中用 <code>Configuration</code> 的实例了</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要使用单例模式"><a href="#不要使用单例模式" class="headerlink" title="不要使用单例模式"></a>不要使用单例模式</h3><p>单例是一种 <a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="noopener">反模式</a>.  以下是解释：Paraphrased from Brian Button:</p><ol><li>总是被用成全局实例。They are generally used as a <strong>global instance</strong>, why is that so bad? Because <strong>you hide the dependencies</strong> of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a <a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank" rel="noopener">code smell</a>.</li><li>违反了<a href>单一响应原则</a>They violate the <a href="#single-responsibility-principle-srp">single responsibility principle</a>: by virtue of the fact that <strong>they control their own creation and lifecycle</strong>.</li><li>导致代码强耦合They inherently cause code to be tightly <a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29" target="_blank" rel="noopener">coupled</a>. This makes faking them out under <strong>test rather difficult</strong> in many cases.</li><li>在整个程序的生命周期中始终携带状态。They carry state around for the lifetime of the application. Another hit to testing since <strong>you can end up with a situation where tests need to be ordered</strong> which is a big no for unit tests. Why? Because each unit test should be independent from the other.</li></ol><p>这里有一篇非常好的讨论单例模式的[根本问题((<a href="http://misko.hevery.com/2008/08/25/root-cause-of-singletons/)的文章，是[Misko" target="_blank" rel="noopener">http://misko.hevery.com/2008/08/25/root-cause-of-singletons/)的文章，是[Misko</a> Hevery](<a href="http://misko.hevery.com/about/" target="_blank" rel="noopener">http://misko.hevery.com/about/</a>) 写的。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $dsn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span>: <span class="title">DBConnection</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::$instance === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$singleton = DBConnection::getInstance();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $dsn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <code>DBConnection</code> 类的实例并通过 <a href="http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters" target="_blank" rel="noopener">DSN</a> 配置.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$connection = <span class="keyword">new</span> DBConnection($dsn);</span><br></pre></td></tr></table></figure><p>现在你必须在程序中 使用 <code>DBConnection</code> 的实例了</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="封装条件语句"><a href="#封装条件语句" class="headerlink" title="封装条件语句"></a>封装条件语句</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($article-&gt;state === <span class="string">'published'</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($article-&gt;isPublished()) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免用反义条件判断"><a href="#避免用反义条件判断" class="headerlink" title="避免用反义条件判断"></a>避免用反义条件判断</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span><span class="params">(\DOMNode $node)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent($node))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span><span class="params">(\DOMNode $node)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent($node)) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h3><p>这看起来像一个不可能任务。当人们第一次听到这句话是都会这么说。<br>“没有<code>if语句</code>我还能做啥？” 答案是你可以使用多态来实现多种场景<br>的相同任务。第二个问题很常见， “这么做可以，但为什么我要这么做？”<br> 答案是前面我们学过的一个Clean Code原则：一个函数应当只做一件事。<br> 当你有很多含有<code>if</code>语句的类和函数时,你的函数做了不止一件事。<br> 记住，只做一件事。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免类型检查-part-1"><a href="#避免类型检查-part-1" class="headerlink" title="避免类型检查 (part 1)"></a>避免类型检查 (part 1)</h3><p>PHP是弱类型的,这意味着你的函数可以接收任何类型的参数。<br>有时候你为这自由所痛苦并且在你的函数渐渐尝试类型检查。<br>有很多方法去避免这么做。第一种是统一API。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span><span class="params">($vehicle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">        $vehicle-&gt;pedalTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">        $vehicle-&gt;driveTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span><span class="params">(Traveler $vehicle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $vehicle-&gt;travelTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免类型检查-part-2"><a href="#避免类型检查-part-2" class="headerlink" title="避免类型检查 (part 2)"></a>避免类型检查 (part 2)</h3><p>如果你正使用基本原始值比如字符串、整形和数组，要求版本是PHP 7+，不用多态，需要类型检测，<br>那你应当考虑<a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noopener">类型声明</a>或者严格模式。<br>提供了基于标准PHP语法的静态类型。 手动检查类型的问题是做好了需要好多的废话，好像为了安全就可以不顾损失可读性。<br>保持你的PHP 整洁，写好测试，做好代码回顾。做不到就用PHP严格类型声明和严格模式来确保安全。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">($val1, $val2)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_numeric($val1) || !is_numeric($val2)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Must be of type Number'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $val1 + $val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">(int $val1, int $val2)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $val1 + $val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="移除僵尸代码"><a href="#移除僵尸代码" class="headerlink" title="移除僵尸代码"></a>移除僵尸代码</h3><p>僵尸代码和重复代码一样坏。没有理由保留在你的代码库中。如果从来没被调用过，就删掉！<br>因为还在代码版本库里，因此很安全。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$request = newRequestModule($requestUrl);</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, $request, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$request = requestModule($requestUrl);</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, $request, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>在PHP中你可以对方法使用<code>public</code>, <code>protected</code>, <code>private</code> 来控制对象属性的变更。</p><ul><li>当你想对对象属性做获取之外的操作时，你不需要在代码中去寻找并修改每一个该属性访问方法</li><li>当有<code>set</code>对应的属性方法时，易于增加参数的验证</li><li>封装内部的表示</li><li>使用set<em>和get</em>时，易于增加日志和错误控制</li><li>继承当前类时，可以复写默认的方法功能</li><li>当对象属性是从远端服务器获取时，get<em>，set</em>易于使用延迟加载</li></ul><p>此外，这样的方式也符合OOP开发中的<a href="#开闭原则">开闭原则</a></p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $balance = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">$bankAccount-&gt;balance -= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $balance = <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;balance = $balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span><span class="params">(int $amount)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($amount &gt; <span class="keyword">$this</span>-&gt;balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Amount greater than available balance.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance -= $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deposit</span><span class="params">(int $amount)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance += $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBalance</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">$bankAccount-&gt;withdraw($shoesPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get balance</span></span><br><span class="line">$balance = $bankAccount-&gt;getBalance();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="给对象使用私有或受保护的成员变量"><a href="#给对象使用私有或受保护的成员变量" class="headerlink" title="给对象使用私有或受保护的成员变量"></a>给对象使用私有或受保护的成员变量</h3><ul><li>对<code>public</code>方法和属性进行修改非常危险，因为外部代码容易依赖他，而你没办法控制。<strong>对之修改影响所有这个类的使用者。</strong> <code>public</code> methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can’t control what code relies on them. <strong>Modifications in class are dangerous for all users of class.</strong></li><li>对<code>protected</code>的修改跟对<code>public</code>修改差不多危险，因为他们对子类可用，他俩的唯一区别就是可调用的位置不一样，<strong>对之修改影响所有集成这个类的地方。</strong>  <code>protected</code> modifier are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between public and protected is only in access mechanism, but encapsulation guarantee remains the same. <strong>Modifications in class are dangerous for all descendant classes.</strong></li><li>对<code>private</code>的修改保证了这部分代码<strong>只会影响当前类</strong><code>private</code> modifier guarantees that code is <strong>dangerous to modify only in boundaries of single class</strong> (you are safe for modifications and you won’t have <a href="http://www.urbandictionary.com/define.php?term=Jengaphobia&defid=2494196" target="_blank" rel="noopener">Jenga effect</a>).</li></ul><p>所以，当你需要控制类里的代码可以被访问时才用<code>public/protected</code>，其他时候都用<code>private</code>。</p><p>可以读一读这篇 <a href="http://fabien.potencier.org/pragmatism-over-theory-protected-vs-private.html" target="_blank" rel="noopener">博客文章</a> ，<a href="https://github.com/fabpot" target="_blank" rel="noopener">Fabien Potencier</a>写的.</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;name; <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;getName(); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="少用继承多用组合"><a href="#少用继承多用组合" class="headerlink" title="少用继承多用组合"></a>少用继承多用组合</h3><p>正如  the Gang of Four 所著的<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener"><em>设计模式</em></a>之前所说，<br>我们应该尽量优先选择组合而不是继承的方式。使用继承和组合都有很多好处。<br>这个准则的主要意义在于当你本能的使用继承时，试着思考一下<code>组合</code>是否能更好对你的需求建模。<br>在一些情况下，是这样的。</p><p>接下来你或许会想，“那我应该在什么时候使用继承？”<br>答案依赖于你的问题，当然下面有一些何时继承比组合更好的说明：</p><ol><li>你的继承表达了“是一个”而不是“有一个”的关系（人类-》动物，用户-》用户详情）</li><li>你可以复用基类的代码（人类可以像动物一样移动）</li><li>你想通过修改基类对所有派生类做全局的修改（当动物移动时，修改她们的能量消耗）</li></ol><p><strong>糟糕的:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好，因为 Employees "有" taxdata</span></span><br><span class="line"><span class="comment">// 而 EmployeeTaxData 不是 Employee 类型的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email, string $ssn, string $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($name, $email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $ssn, string $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line">    <span class="keyword">private</span> $taxData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTaxData</span><span class="params">(string $ssn, string $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;taxData = <span class="keyword">new</span> EmployeeTaxData($ssn, $salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免连贯接口"><a href="#避免连贯接口" class="headerlink" title="避免连贯接口"></a>避免连贯接口</h3><p><a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="noopener">连贯接口Fluent interface</a>是一种<br>旨在提高面向对象编程时代码可读性的API设计模式，他基于<a href="https://en.wikipedia.org/wiki/Method_chaining" target="_blank" rel="noopener">方法链Method chaining</a></p><p>有上下文的地方可以降低代码复杂度，例如<a href="https://phpunit.de/manual/current/en/test-doubles.html" target="_blank" rel="noopener">PHPUnit Mock Builder</a><br>和<a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html" target="_blank" rel="noopener">Doctrine Query Builder</a><br>，更多的情况会带来较大代价：</p><p>While there can be some contexts, frequently builder objects, where this<br>pattern reduces the verbosity of the code (for example the <a href="https://phpunit.de/manual/current/en/test-doubles.html" target="_blank" rel="noopener">PHPUnit Mock Builder</a><br>or the <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html" target="_blank" rel="noopener">Doctrine Query Builder</a>),<br>more often it comes at some costs:</p><ol><li>破坏了 <a href="https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29" target="_blank" rel="noopener">对象封装</a></li><li>破坏了 <a href="https://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener">装饰器模式</a></li><li>在测试组件中不好做<a href="https://en.wikipedia.org/wiki/Mock_object" target="_blank" rel="noopener">mock</a></li><li>导致提交的diff不好阅读</li></ol><p>了解更多请阅读 <a href="https://ocramius.github.io/blog/fluent-interfaces-are-evil/" target="_blank" rel="noopener">连贯接口为什么不好</a><br>，作者 <a href="https://github.com/Ocramius" target="_blank" rel="noopener">Marco Pivetta</a>.</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">private</span> $model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">private</span> $color = <span class="string">'white'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMake</span><span class="params">(string $make)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make = $make;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span><span class="params">(string $model)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $model;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">(string $color)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;make, <span class="keyword">$this</span>-&gt;model, <span class="keyword">$this</span>-&gt;color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$car = (<span class="keyword">new</span> Car())</span><br><span class="line">  -&gt;setColor(<span class="string">'pink'</span>)</span><br><span class="line">  -&gt;setMake(<span class="string">'Ford'</span>)</span><br><span class="line">  -&gt;setModel(<span class="string">'F-150'</span>)</span><br><span class="line">  -&gt;dump();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">private</span> $model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">private</span> $color = <span class="string">'white'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMake</span><span class="params">(string $make)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make = $make;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span><span class="params">(string $model)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">(string $color)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;make, <span class="keyword">$this</span>-&gt;model, <span class="keyword">$this</span>-&gt;color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$car = <span class="keyword">new</span> Car();</span><br><span class="line">$car-&gt;setColor(<span class="string">'pink'</span>);</span><br><span class="line">$car-&gt;setMake(<span class="string">'Ford'</span>);</span><br><span class="line">$car-&gt;setModel(<span class="string">'F-150'</span>);</span><br><span class="line">$car-&gt;dump();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="推荐使用-final-类"><a href="#推荐使用-final-类" class="headerlink" title="推荐使用 final 类"></a>推荐使用 final 类</h3><p>能用时尽量使用 <code>final</code> 关键字:</p><ol><li>阻止不受控的继承链</li><li>鼓励 <a href="#少用继承多用组合">组合</a>.</li><li>鼓励 <a href="#单一职责模式">单一职责模式</a>.</li><li>鼓励开发者用你的公开方法而非通过继承类获取受保护方法的访问权限.</li><li>使得在不破坏使用你的类的应用的情况下修改代码成为可能.</li></ol><p>The only condition is that your class should implement an interface and no other public methods are defined.</p><p>For more informations you can read <a href="https://ocramius.github.io/blog/when-to-declare-classes-final/" target="_blank" rel="noopener">the blog post</a> on this topic written by <a href="https://ocramius.github.io/" target="_blank" rel="noopener">Marco Pivetta (Ocramius)</a>.</p><p><strong>Bad:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string The color of the vehicle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string The color of the vehicle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $color;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><p><strong>SOLID</strong> 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则</p><ul><li><a href="#职责原则">S: 单一职责原则 (SRP)</a></li><li><a href="#开闭原则">O: 开闭原则 (OCP)</a></li><li><a href="#里氏替换原则">L: 里氏替换原则 (LSP)</a></li><li><a href="#接口隔离原则">I: 接口隔离原则 (ISP)</a></li><li><a href="#依赖倒置原则">D: 依赖倒置原则 (DIP)</a></li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>Single Responsibility Principle (SRP)</p><p>正如在Clean Code所述，”修改一个类应该只为一个理由”。<br>人们总是易于用一堆方法塞满一个类，如同我们只能在飞机上<br>只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做<br>的问题是：从概念上这样的类不是高内聚的，并且留下了很多<br>理由去修改它。将你需要修改类的次数降低到最小很重要。<br>这是因为，当有很多方法在类中时，修改其中一处，你很难知<br>晓在代码库中哪些依赖的模块会被影响到。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">(array $settings)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line">    <span class="keyword">private</span> $auth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;auth = <span class="keyword">new</span> UserAuth($user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">(array $settings)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>Open/Closed Principle (OCP)</p><p>正如Bertrand Meyer所述，”软件的工件（ classes, modules, functions 等）<br>应该对扩展开放，对修改关闭。” 然而这句话意味着什么呢？这个原则大体上表示你<br>应该允许在不改变已有代码的情况下增加新的功能</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'ajaxAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'nodeAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $adapterName = <span class="keyword">$this</span>-&gt;adapter-&gt;getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($adapterName === <span class="string">'ajaxAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeAjaxCall($url);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($adapterName === <span class="string">'httpNodeAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeHttpCall($url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;adapter-&gt;request($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>Liskov Substitution Principle (LSP)</p><p>这是一个简单的原则，却用了一个不好理解的术语。它的正式定义是<br>“如果S是T的子类型，那么在不改变程序原有既定属性（检查、执行<br>任务等）的前提下，任何T类型的对象都可以使用S类型的对象替代<br>（例如，使用S的对象可以替代T的对象）” 这个定义更难理解:-)。</p><p>对这个概念最好的解释是：如果你有一个父类和一个子类，在不改变<br>原有结果正确性的前提下父类和子类可以互换。这个听起来依旧让人<br>有些迷惑，所以让我们来看一个经典的正方形-长方形的例子。从数学<br>上讲，正方形是一种长方形，但是当你的模型通过继承使用了”is-a”<br>的关系时，就不对了。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">(int $width)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(int $height)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">(int $width)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(int $height)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArea</span><span class="params">(Rectangle $rectangle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $rectangle-&gt;setWidth(<span class="number">4</span>);</span><br><span class="line">    $rectangle-&gt;setHeight(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">'%s has area %d.'</span>, get_class($rectangle), $rectangle-&gt;getArea()).PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</span><br><span class="line">    printArea($rectangle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>最好是将这两种四边形分别对待，用一个适合两种类型的更通用子类型来代替。</p><p>尽管正方形和长方形看起来很相似，但他们是不同的。<br>正方形更接近菱形，而长方形更接近平行四边形。但他们不是子类型。<br>尽管相似，正方形、长方形、菱形、平行四边形都是有自己属性的不同形状。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $width, int $height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;length = $length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;length ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArea</span><span class="params">(Shape $shape)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">'%s has area %d.'</span>, get_class($shape), $shape-&gt;getArea()).PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($shapes <span class="keyword">as</span> $shape) &#123;</span><br><span class="line">    printArea($shape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>Interface Segregation Principle (ISP)</p><p>接口隔离原则表示：”调用方不应该被强制依赖于他不需要的接口”</p><p>有一个清晰的例子来说明示范这条原则。当一个类需要一个大量的设置项，<br>为了方便不会要求调用方去设置大量的选项，因为在通常他们不需要所有的<br>设置项。使设置项可选有助于我们避免产生”胖接口”</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... robot can't eat, but it must implement this method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>不是每一个工人都是雇员，但是每一个雇员都是一个工人</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Feedable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Feedable</span>, <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// robot can only work</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotEmployee</span> <span class="keyword">implements</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>Dependency Inversion Principle (DIP)</p><p>这条原则说明两个基本的要点：</p><ol><li>高阶的模块不应该依赖低阶的模块，它们都应该依赖于抽象</li><li>抽象不应该依赖于实现，实现应该依赖于抽象</li></ol><p>这条起初看起来有点晦涩难懂，但是如果你使用过 PHP 框架（例如 Symfony），你应该见过<br>依赖注入（DI），它是对这个概念的实现。虽然它们不是完全相等的概念，依赖倒置原则使高阶模块<br>与低阶模块的实现细节和创建分离。可以使用依赖注入（DI）这种方式来实现它。最大的好处<br>是它使模块之间解耦。耦合会导致你难于重构，它是一种非常糟糕的的开发模式。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="别写重复代码-DRY"><a href="#别写重复代码-DRY" class="headerlink" title="别写重复代码 (DRY)"></a>别写重复代码 (DRY)</h2><p>试着去遵循<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a> 原则.</p><p>尽你最大的努力去避免复制代码，它是一种非常糟糕的行为，复制代码<br>通常意味着当你需要变更一些逻辑时，你需要修改不止一处。</p><p>试想一下，如果你在经营一家餐厅并且你在记录你仓库的进销记录：所有<br>的土豆，洋葱，大蒜，辣椒等。如果你有多个列表来管理进销记录，当你<br>用其中一些土豆做菜时你需要更新所有的列表。如果你只有一个列表的话<br>只有一个地方需要更新。</p><p>通常情况下你复制代码是应该有两个或者多个略微不同的逻辑，它们大多数<br>都是一样的，但是由于它们的区别致使你必须有两个或者多个隔离的但大部<br>分相同的方法，移除重复的代码意味着用一个function/module/class创<br>建一个能处理差异的抽象。</p><p>用对抽象非常关键，这正是为什么你必须学习遵守在<a href="#类">类</a>章节写<br>的SOLID原则，不合理的抽象比复制代码更糟糕，所以务必谨慎！说了这么多，<br>如果你能设计一个合理的抽象，那就这么干！别写重复代码，否则你会发现<br>任何时候当你想修改一个逻辑时你必须修改多个地方。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span><span class="params">(array $developers)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($developers <span class="keyword">as</span> $developer) &#123;</span><br><span class="line">        $expectedSalary = $developer-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $developer-&gt;getExperience();</span><br><span class="line">        $githubLink = $developer-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span><span class="params">(array $managers)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($managers <span class="keyword">as</span> $manager) &#123;</span><br><span class="line">        $expectedSalary = $manager-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $manager-&gt;getExperience();</span><br><span class="line">        $githubLink = $manager-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">(array $employees)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        $expectedSalary = $employee-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $employee-&gt;getExperience();</span><br><span class="line">        $githubLink = $employee-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>极好:</strong></p><p>最好让代码紧凑一点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">(array $employees)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        render([</span><br><span class="line">            $employee-&gt;calculateExpectedSalary(),</span><br><span class="line">            $employee-&gt;getExperience(),</span><br><span class="line">            $employee-&gt;getGithubLink()</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;文章出处 &lt;a href=&quot;https://github.com/php-cpm/clean-code-php&quot; 
      
    
    </summary>
    
    
      <category term="代码规范" scheme="http://shiwenyuan.github.io/categories/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="php" scheme="http://shiwenyuan.github.io/tags/php/"/>
    
      <category term="代码规范" scheme="http://shiwenyuan.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置https</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9sli000q1370k0dfisi8.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9sli000q1370k0dfisi8.html</id>
    <published>2018-09-11T08:48:05.000Z</published>
    <updated>2019-09-10T09:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网站https"><a href="#网站https" class="headerlink" title="网站https"></a>网站https</h1><p>网站https化已是大势所趋，个人blog也都可以把https玩儿起来！</p><h1 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个免费、自动化、开放的证书签发服务。它由 ISRG（Internet Security Research Group，互联网安全研究小组）提供服务，而 ISRG 是来自于美国加利福尼亚州的一个公益组织。Let&apos;s Encrypt 得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛。</span><br><span class="line">申请 Let&apos;s Encrypt 证书不但免费，还非常简单，虽然每次只有 90 天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。经过一段时间的观望，我也正式启用 Let&apos;s Encrypt 证书了，本文记录本站申请过程和遇到的问题。</span><br><span class="line">我没有使用 Let&apos;s Encrypt 官网提供的工具来申请证书，而是用了 [acme.sh](http://https://github.com/Neilpang/acme.sh &quot;acme.sh&quot;) 这个更为小巧的开源工具。以下内容基本按照 acme的说明文档写的，省略了一些我不需要的步骤。</span><br></pre></td></tr></table></figure><hr><h1 id="配置验证服务"><a href="#配置验证服务" class="headerlink" title="配置验证服务"></a>配置验证服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传统 CA 的验证方式一般是往 admin@youremail.com 发验证邮件，而 Let&apos;s Encrypt 是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。</span><br></pre></td></tr></table></figure><h1 id="配置前提"><a href="#配置前提" class="headerlink" title="配置前提"></a>配置前提</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. nginx安装了https模块</span><br></pre></td></tr></table></figure><hr><h1 id="通过web访问check域名权限"><a href="#通过web访问check域名权限" class="headerlink" title="通过web访问check域名权限"></a>通过web访问check域名权限</h1><h2 id="步骤1（建立目录或者nginx访问规则）"><a href="#步骤1（建立目录或者nginx访问规则）" class="headerlink" title="步骤1（建立目录或者nginx访问规则）"></a>步骤1（建立目录或者nginx访问规则）</h2><h1 id="CA认证"><a href="#CA认证" class="headerlink" title="CA认证"></a>CA认证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">    # 注：这里的$challenges_dir请替换成你自己的真实目录，如：/home/work/www/challenges/</span><br><span class="line">    alias $challenges_dir;</span><br><span class="line">    try_files $uri =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录添加.well-known/acme-challenge</span><br><span class="line">Let&apos;s Encrypt 用来校验网站权限</span><br></pre></td></tr></table></figure><h2 id="步骤二-生成证书"><a href="#步骤二-生成证书" class="headerlink" title="步骤二 生成证书"></a>步骤二 生成证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./acme.sh --issue -d diancan.xiaochengxu.phpblog.com.cn --webroot /home/www/xiaochengxu/diancan</span><br></pre></td></tr></table></figure><h2 id="步骤三-cp证书到指定位置"><a href="#步骤三-cp证书到指定位置" class="headerlink" title="步骤三 cp证书到指定位置"></a>步骤三 cp证书到指定位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert -d www.your-app.com \</span><br><span class="line">               --keypath       /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn.key  \</span><br><span class="line">               --fullchainpath /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn.key.pem \</span><br><span class="line">               --reloadcmd     &quot; /usr/local/nginx/sbin/nginx -s reload&quot;</span><br></pre></td></tr></table></figure><h2 id="步骤四-配置nginx"><a href="#步骤四-配置nginx" class="headerlink" title="步骤四 配置nginx"></a>步骤四 配置nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">        location / &#123;</span><br><span class="line">            rewrite ^/(.*)$ https://diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen    443 ssl;</span><br><span class="line">    server_name diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">    include  /usr/local/nginx/ssl/ssl_params;</span><br><span class="line">    ssl_certificate    /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn/diancan.xiaochengxu.phpblog.com.cn.cer;</span><br><span class="line">    ssl_certificate_key    /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn/diancan.xiaochengxu.phpblog.com.cn.key;</span><br><span class="line">    root /home/www/diancan/xiaochengxu; # 该项要修改为你准备存放相关网页的路径</span><br><span class="line">    include /usr/local/nginx/ssl/ssl_headers;</span><br><span class="line">    </span><br><span class="line">   location / &#123;</span><br><span class="line">         try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">         index  index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include /usr/local/nginx/conf/fastcgi.conf;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># out  /usr/local/nginx/ssl/ssl_headers</span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;</span><br><span class="line"># out  /usr/local/nginx/ssl/ssl_params</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_dhparam /usr/local/nginx/ssl/dhparam.pem; # See https://weakdh.org/sysadmin.html for more details</span><br><span class="line">ssl_session_cache shared:SSL:1m;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_prefer_server_ciphers   on;</span><br><span class="line">ssl_ciphers &quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&quot;;</span><br><span class="line"></span><br><span class="line">dhparam.pem这个文件是我之前就生成好的，生成命令</span><br><span class="line">openssl dhparam -out /usr/local/nginx/ssl/dhparam.pem 2048</span><br></pre></td></tr></table></figure><h2 id="步骤五-重启nginx查看"><a href="#步骤五-重启nginx查看" class="headerlink" title="步骤五 重启nginx查看"></a>步骤五 重启nginx查看</h2><h2 id><a href="#" class="headerlink" title></a><img src="https://user-gold-cdn.xitu.io/2019/8/7/16c6a76d1b74cbf5?w=1240&h=775&f=jpeg&s=32135" alt="https配置成功后web访问界面" title="https配置成功后web访问界面"></h2><h1 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h1><p>申请下来的证书有效期只有90天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在crontab 中添加一条命令</span><br><span class="line">0 0 * * *  /home/work/opbin/ssl/acme.sh-master/acme.sh --cron --home /home/work/opbin/ssl/acme.sh-master/acme.sh</span><br><span class="line">此处就是每天凌晨检查证书  证书会在60天的时候更新 因为acme会记住之前执行的installcert，所以更新完证书之后他会自动重启一下nginx 如果之前运行installcert的时候没有输入reloadcmd,则需要更新之后自己手动重启(这样就没有自动更新的意义了)</span><br></pre></td></tr></table></figure><hr><h1 id="通过dns配置check权限"><a href="#通过dns配置check权限" class="headerlink" title="通过dns配置check权限"></a>通过dns配置check权限</h1><h2 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h2><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ !1019</span><br><span class="line">./acme.sh --issue --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Creating domain key</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] The domain key is here: /home/work/.acme.sh/*.test.com/*.test.com.key</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Multi domain=&apos;DNS:*.test.com,test.com&apos;</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:24:59 CST 2018] Getting webroot for domain=&apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Getting webroot for domain=&apos;test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Add the following TXT record:</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] TXT value: &apos;Oe0iBXj3QvUErZOpROldRLx5jpyXbazsX36lkI46C_Y&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please be aware that you prepend _acme-challenge. before your domain</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] so the resulting subdomain will be: _acme-challenge.test.com</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Add the following TXT record:</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] TXT value: &apos;qVFtVzCnBsj1omQcdU1m8180rUBO8V5AHDczFUHqsMY&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please be aware that you prepend _acme-challenge. before your domain</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] so the resulting subdomain will be: _acme-challenge.test.com</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please add the TXT records to the domains, and re-run with --renew.</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please check log file for more details: /home/work/.acme.sh/acme.sh.log</span><br><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh --renew --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:31:18 CST 2018] Renew: &apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Multi domain=&apos;DNS:*.test.com,test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Verifying:*.test.com</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Verifying:test.com</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Verify finished, start to sign.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Cert success.</span><br><span class="line">这个上面说的是需要在dns中添加</span><br><span class="line">Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">TXT value: &apos;Oe0iBXj3QvUErZOpROldRLx5jpyXbazsX36lkI46C_Y&apos;</span><br><span class="line">与</span><br><span class="line"> Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">TXT value: &apos;qVFtVzCnBsj1omQcdU1m8180rUBO8V5AHDczFUHqsMY&apos;</span><br></pre></td></tr></table></figure><p>生效后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh --renew --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:31:18 CST 2018] Renew: &apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Multi domain=&apos;DNS:*.test.com,DNS:test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Verifying:*.test.com</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Verifying:test.com</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Verify finished, start to sign.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIGGDCCBQCgAwIBAgISA/ZIZ/p9WiVXaWSVytreKZWhMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</span><br><span class="line">ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xODA5MTExMjMxMjNaFw0x</span><br><span class="line">ODEyMTAxMjMxMjNaMBoxGDAWBgNVBAMMDyoueG1hbmxlZ2FsLmNvbTCCASIwDQYJ</span><br><span class="line">KoZIhvcNAQEBBQADggEPADCCAQoCggEBANnH033ObKrmxX9eLIKqt3kKxcIrcfab</span><br><span class="line">qnLJ0nGnjLRaOXco7B3q865OHx4PTKNT89RSAzfJQ5ZSXBY8QqbZAKv8kAzPA7yE</span><br><span class="line">0wliJ3rYCesVfAR1CgnOc+jQkTjlZp0q138/GDthgplvaziJUTaGL31Dj338oFU3</span><br><span class="line">xmyMxp2JmzUUjD4KkoHPZql5xkQ3pLzxRInWGMfal7f4oHaZQJr1Xwyu5BR/m9G1</span><br><span class="line">+PBlmqGsTka75n5i8uchjIFPAuH48c9fEJXLB0TSUfvAdi9HDpVxXsglmiw4eL5J</span><br><span class="line">F5ORYIKajAXObt/vl2uNbUHYV5Mr74jr7U/YqAA48X/x9jeHaVNSS/sCAwEAAaOC</span><br><span class="line">AyYwggMiMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYB</span><br><span class="line">BQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUhLPM1+fVbGsgfc1CFAsRyu96</span><br><span class="line">DUMwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEE</span><br><span class="line">YzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQu</span><br><span class="line">b3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQu</span><br><span class="line">b3JnLzApBgNVHREEIjAggg8qLnhtYW5sZWdhbC5jb22CDXhtYW5sZWdhbC5jb20w</span><br><span class="line">gf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeYGCysGAQQBgt8TAQEBMIHWMCYGCCsG</span><br><span class="line">AQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYBBQUHAgIw</span><br><span class="line">gZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1cG9uIGJ5</span><br><span class="line">IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSBpbiBhY2NvcmRhbmNlIHdpdGggdGhl</span><br><span class="line">IENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNlbmNyeXB0</span><br><span class="line">Lm9yZy9yZXBvc2l0b3J5LzCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2AMEWSuCn</span><br><span class="line">ctLUOS3ICsEHcNTwxJvemRpIQMH6B1Fk9jNgAAABZcjUVQgAAAQDAEcwRQIhALEw</span><br><span class="line">fEJJ6OS6IiWZNXZEO/ymIAgZGpD812KCt484URUHAiAW6FCC+6rYa1AFUdT/vFcC</span><br><span class="line">3nc4MC9IGHLPOKyiyC8pEAB2AKRQEmkFWhVUXmIRqze8ED9irlV2pF5LFxRFPhsi</span><br><span class="line">EGolAAABZcjUVQoAAAQDAEcwRQIgETcbXZ/E5QEB/oRR3xr4B3dZELF4TfnTJJgH</span><br><span class="line">7J8YF9gCIQCKq4jXNwJjCAJDz0K81MaoAZ23CImUYJIHCVJTitzphzANBgkqhkiG</span><br><span class="line">9w0BAQsFAAOCAQEAPWWEp4v4cvU3c+fgt2a0mQXI5q0gmYQAYaxyXubs3HfxFsFX</span><br><span class="line">zroAPH6wvLk/Cw1EciBInnXtvQ+DDfi4FsyhWn598czJ/YEIGiV7ZCi1Ah8NVniS</span><br><span class="line">T+R3nVIBqhSDCGOpmHdvtfCRCoZErAVFvv0ABsQUSQHkEYmiPwEddhU5srOENzcV</span><br><span class="line">4qel/9/bzK3hGlPWB8jLvWQ8uHtSHibGAJsnEG0rMYkFs6pqnzM2EFdRNfm3axDK</span><br><span class="line">D8Gai7V5Ezu31iwvgZXjLmhl6xtH3CzkqmPaDarxJtnZLet8SLaEY0inmbhvupOG</span><br><span class="line">LUuO+EnAXlxk40z8V1/GtWuyYMz38OwCWcB5fA==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Your cert is in  /home/work/.acme.sh/*.test.com/*.test.com.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Your cert key is in  /home/work/.acme.sh/*.test.com/*.test.com.key </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] The intermediate CA cert is in  /home/work/.acme.sh/*.test.com/ca.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] And the full chain certs is there:  /home/work/.acme.sh/*.test.com/fullchain.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] It seems that you are using dns manual mode. please take care: The dns manual mode can not renew automatically, you must issue it again manually. You&apos;d better use the other modes instead.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Call hook error.</span><br></pre></td></tr></table></figure><p>生成成功后配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh  --installcert  -d *.xmanlegal.com \</span><br><span class="line">&gt; --key-file /mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key \</span><br><span class="line">&gt; --fullchain-file /mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key.cer \</span><br><span class="line">&gt; --reloadcmd &quot;echo &quot;Asdf1234&quot; sudo -S /mnt/usr/sbin/nginx -s reload&quot;</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Installing key to:/mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Installing full chain to:/mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key.cer</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Run reload cmd: echo Asdf1234 sudo -S /mnt/usr/sbin/nginx -s reload</span><br><span class="line">Asdf1234 sudo -S /mnt/usr/sbin/nginx -s reload</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Reload success</span><br></pre></td></tr></table></figure><hr><h1 id="末文"><a href="#末文" class="headerlink" title="末文"></a>末文</h1><p><a href="https://www.ssllabs.com/ssltest/index.html" title="证书级别测试" target="_blank" rel="noopener">证书级别测试</a><br><a href="https://github.com/Neilpang/acme.sh/wiki/Blogs-and-tutorials" title="相关技术博客" target="_blank" rel="noopener">相关技术博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网站https&quot;&gt;&lt;a href=&quot;#网站https&quot; class=&quot;headerlink&quot; title=&quot;网站https&quot;&gt;&lt;/a&gt;网站https&lt;/h1&gt;&lt;p&gt;网站https化已是大势所趋，个人blog也都可以把https玩儿起来！&lt;/p&gt;
&lt;h1 id=&quot;L
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://shiwenyuan.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://shiwenyuan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>开发自己的composer包</title>
    <link href="http://shiwenyuan.github.io/post/ck9so9slj000s1370m6whjpfo.html"/>
    <id>http://shiwenyuan.github.io/post/ck9so9slj000s1370m6whjpfo.html</id>
    <published>2018-09-11T03:19:20.000Z</published>
    <updated>2019-09-10T09:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="composer简介"><a href="#composer简介" class="headerlink" title="composer简介"></a>composer简介</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</span><br></pre></td></tr></table></figure><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p> 1.一个github账号<br> 2.一个packagist账号<br> 3.一台安装composer的开发机</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://packagist.org/login/" title="packagist注册链接" target="_blank" rel="noopener">packagist注册链接</a></td><td><a href="https://github.com/join?source=experiment-header-control-home" title="github注册链接" target="_blank" rel="noopener">github注册链接</a></td><td><a href="https://docs.phpcomposer.com/" title="composer注册链接" target="_blank" rel="noopener">composer注册链接</a></td></tr><tr><td>—</td><td></td><td></td></tr><tr><td># 发布流程</td><td></td><td></td></tr></tbody></table><h2 id="1-首先在github上创建一个项目"><a href="#1-首先在github上创建一个项目" class="headerlink" title="1.首先在github上创建一个项目"></a>1.首先在github上创建一个项目</h2><h2 id="2-把项目克隆到本地"><a href="#2-把项目克隆到本地" class="headerlink" title="2.把项目克隆到本地"></a>2.把项目克隆到本地</h2><h2 id="3-进入项目根目录初始化项目"><a href="#3-进入项目根目录初始化项目" class="headerlink" title="3.进入项目根目录初始化项目"></a>3.进入项目根目录初始化项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">➜  xdpframework git:(master) composer init</span><br><span class="line"></span><br><span class="line">                                            </span><br><span class="line">  Welcome to the Composer config generator  </span><br><span class="line">                                            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This command will guide you through creating your composer.json config.</span><br><span class="line"></span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [shiwenyuan/xdpframework]: </span><br><span class="line">Description []: a xdp framework</span><br><span class="line">Author [北行10000 &lt;13341007105@163.com&gt;, n to skip]: </span><br><span class="line">Minimum Stability []: dev</span><br><span class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []: </span><br><span class="line">License []: MIT</span><br><span class="line"></span><br><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]? </span><br><span class="line">Search for a package: </span><br><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]? </span><br><span class="line">Search for a package: </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Do you confirm generation [yes]? </span><br><span class="line">Would you like the vendor directory added to your .gitignore [yes]? yes</span><br></pre></td></tr></table></figure><p>此时目录下回程车一个composer.json文件，文件内容形如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编写自己的composer包"><a href="#4-编写自己的composer包" class="headerlink" title="4.编写自己的composer包"></a>4.编写自己的composer包</h2><h3 id="4-1-此处我创建了一个src目录并实现了SayHello类"><a href="#4-1-此处我创建了一个src目录并实现了SayHello类" class="headerlink" title="4.1 此处我创建了一个src目录并实现了SayHello类"></a>4.1 此处我创建了一个src目录并实现了SayHello类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  xdpframework git:(master) ✗ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── composer.json</span><br><span class="line">└── src</span><br><span class="line">    └── SayHello.php</span><br></pre></td></tr></table></figure><h3 id="4-2-修改composer-json"><a href="#4-2-修改composer-json" class="headerlink" title="4.2 修改composer.json"></a>4.2 修改composer.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;XdpFrameWork\\&quot;: &quot;src/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-自动加载src目录"><a href="#4-3-自动加载src目录" class="headerlink" title="4.3 自动加载src目录"></a>4.3 自动加载src目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">在4.2添加了src的加载运行composer install实现自动加载</span><br><span class="line">➜  xdpframework git:(master) ✗ composer install</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Nothing to install or update</span><br><span class="line">Generating autoload files</span><br><span class="line">此时目录中会生成一个vendor 它实现了加载方法</span><br><span class="line">➜  xdpframework git:(master) ✗ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── composer.json</span><br><span class="line">├── src</span><br><span class="line">│   └── SayHello.php</span><br><span class="line">└── vendor</span><br><span class="line">    ├── autoload.php</span><br><span class="line">    └── composer</span><br><span class="line">        ├── ClassLoader.php</span><br><span class="line">        ├── LICENSE</span><br><span class="line">        ├── autoload_classmap.php</span><br><span class="line">        ├── autoload_namespaces.php</span><br><span class="line">        ├── autoload_psr4.php</span><br><span class="line">        ├── autoload_real.php</span><br><span class="line">        ├── autoload_static.php</span><br><span class="line">        └── installed.json</span><br></pre></td></tr></table></figure><h3 id="4-4-测试结果"><a href="#4-4-测试结果" class="headerlink" title="4.4 测试结果"></a>4.4 测试结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">创建test.php</span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: shiwenyuan</span><br><span class="line"> * Date: 2018/8/2 13341007105@163.com</span><br><span class="line"> * Time: 下午8:56</span><br><span class="line"> */</span><br><span class="line">require_once __DIR__.&quot;/vendor/autoload.php&quot;;</span><br><span class="line">use XdpFrameWork\SayHello;</span><br><span class="line">SayHello::world();</span><br><span class="line">命令行中运行</span><br><span class="line">➜  xdpframework git:(master) ✗ php test.php</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="4-5-忽略vendor、composer-json文件"><a href="#4-5-忽略vendor、composer-json文件" class="headerlink" title="4.5 忽略vendor、composer.json文件"></a>4.5 忽略vendor、composer.json文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改.gitignore增加下面两行</span><br><span class="line">/vendor/</span><br></pre></td></tr></table></figure><h3 id="4-6提交代码到-github"><a href="#4-6提交代码到-github" class="headerlink" title="4.6提交代码到 github"></a>4.6提交代码到 github</h3><hr><h2 id="5-Packagist配置"><a href="#5-Packagist配置" class="headerlink" title="5. Packagist配置"></a>5. Packagist配置</h2><h3 id="5-1-github关联到Packagist"><a href="#5-1-github关联到Packagist" class="headerlink" title="5.1 github关联到Packagist"></a>5.1 github关联到Packagist</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先要在Packagist上登录</span><br><span class="line">2.点击顶部导航条中的Summit按钮</span><br><span class="line">3.在输入框中输入github上的仓库地址，如：https://github.com/shiwenyuan/xdpfarmwork</span><br><span class="line">4.然后点击Check按钮</span><br><span class="line">5.Packagist会去检测此仓库地址的代码是否符合Composer的Package包的要求</span><br><span class="line">6.检测正常的话，会出现Submit按钮，再点击一下Submit按钮，我们的包就提交到Packagist上了</span><br></pre></td></tr></table></figure><h3 id="5-2-配置自动同步"><a href="#5-2-配置自动同步" class="headerlink" title="5.2 配置自动同步"></a>5.2 配置自动同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.从Packagist点击个人中心点击profile获取token然后复制</span><br><span class="line">2.到github项目首页上点击settings、点击webhooks、点击addwebhook</span><br><span class="line">3.把https://packagist.org/api/bitbucket?username=USERNAME&amp;apiToken=TOKEN 复制到Payload URL，在下方输入密码后保存</span><br></pre></td></tr></table></figure><h3 id="5-3-打tag测试"><a href="#5-3-打tag测试" class="headerlink" title="5.3 打tag测试"></a>5.3 打tag测试</h3><hr><h2 id="引用包"><a href="#引用包" class="headerlink" title="引用包"></a>引用包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require shiwenyuan/xdpframework</span><br></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果下载不下来到话就换一下镜像</span><br><span class="line">composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br><span class="line">刚发布上去可能会下载不到，没有同步过来-- 可以等一会在试试看</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;composer简介&quot;&gt;&lt;a href=&quot;#composer简介&quot; class=&quot;headerlink&quot; title=&quot;composer简介&quot;&gt;&lt;/a&gt;composer简介&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="composer" scheme="http://shiwenyuan.github.io/categories/composer/"/>
    
    
      <category term="composer" scheme="http://shiwenyuan.github.io/tags/composer/"/>
    
  </entry>
  
</feed>
