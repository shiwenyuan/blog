<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shiwenyuan&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shiwenyuan.github.io/"/>
  <updated>2019-08-07T09:48:24.799Z</updated>
  <id>https://shiwenyuan.github.io/</id>
  
  <author>
    <name>shiwenyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP-多进程之孤儿和僵尸简单讲解</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazgd0005ges6w5y6qvi4.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazgd0005ges6w5y6qvi4.html</id>
    <published>2019-08-07T09:42:13.000Z</published>
    <updated>2019-08-07T09:48:24.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-多进程之孤儿-僵尸"><a href="#PHP-多进程之孤儿-僵尸" class="headerlink" title="PHP 多进程之孤儿 / 僵尸"></a>PHP 多进程之孤儿 / 僵尸</h1><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><h2 id="init-进程"><a href="#init-进程" class="headerlink" title="init 进程"></a>init 进程</h2><p>普通用户运行但有超级权限的进程</p><h2 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><p>父进程在子进程处理完前退出， 子进程就会变成孤儿进程；并由 init 进程进行处理</p><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><ul><li>「z+」标记</li><li>父进程 fork 子进程后， 没有调用 wait 来维护子进程，导致子进程无人管理</li></ul><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>总是不断 fork， 不管维护。系统资源有限 – 就会出现僵尸进程</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>相比孤儿进程，僵尸进程危害更大，毕竟孤儿还有 init 妈妈来抚养，僵尸就只能独自游荡！</p><p>pcntl_wait<br>pcntl_waitpid</p><p>等待或返回 fork 的子进程状态</p><p>相同<br>pcntl_wait($status, $option) == pcntl_waitpid(-1, $status, $option)<br>pcntl_waitpid($pid, $status, $option)</p><h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h2><p>&lt;-1: 等待任意进程组 ID 等于参数 pid 给定值的绝对值的进程<br>-1: 等待任意子进程；与 pcntl_wait 函数行为一致<br>0: 等待任意与调用进程组 ID 相同的子进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0: 等待进程号等于参数 pid 值的子进程</span><br></pre></td></tr></table></figure><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><p>WNOHANG: 如果没有子进程退出立刻返回<br>WUNTRACED: 子进程已经退出并且其状态未报告时返回</p><h2 id="孤儿进程-1"><a href="#孤儿进程-1" class="headerlink" title="孤儿进程"></a>孤儿进程</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>($pid) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am son  parent's pid="</span>.posix_getppid().<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">for</span>( $i = <span class="number">1</span>; $i &lt;= <span class="number">10</span>; $i++ )&#123;</span><br><span class="line">                sleep( <span class="number">1</span> );</span><br><span class="line">                <span class="comment">// posix_getppid()函数的作用就是获取当前进程的父进程进程ID</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"parent's pid ="</span> posix_getppid().PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="comment">// fork error</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am err\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am parent pid="</span>.posix_getpid().<span class="string">"\n"</span>;</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三秒后 由init进程收养</span></span><br></pre></td></tr></table></figure><h2 id="僵尸进程-1"><a href="#僵尸进程-1" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"><span class="keyword">switch</span>($pid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"son process php"</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="comment">// fork error</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"parent process php"</span>);</span><br><span class="line">        sleep(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子进程执行后父进程未取管理导致</span></span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span>($pid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"son process php"</span>);</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="comment">// fork error</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"parent process php"</span>);</span><br><span class="line">        $iid = pcntl_wait($status); <span class="comment">// 等待子进程的状态处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控子进程状态处理后才能输出</span></span><br><span class="line">        <span class="comment">// 只要未触发pcntl_wait，此后的逻辑一直不会处理</span></span><br><span class="line">        <span class="keyword">echo</span> $iid.<span class="string">"-----\n"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sleep(60);</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"><span class="comment">// 增加pcntl_wait</span></span><br><span class="line"><span class="comment">// pcntl_wait($status); // 只要子进程不退出， 父进程就会阻塞再这个地方</span></span><br></pre></td></tr></table></figure><h1 id="更优解决"><a href="#更优解决" class="headerlink" title="更优解决"></a>更优解决</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>($pid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"son process php"</span>);</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        <span class="comment">// fork error</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        cli_set_process_title(<span class="string">"parent process php"</span>);</span><br><span class="line">        pcntl_waitpid($pid, $status, WNOHANG);      <span class="comment">// 监控$pid， 如果没有子进程退出立刻返回</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"I am parent\n"</span>;</span><br><span class="line">        <span class="comment">//sleep(60);</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===</span><br><span class="line"><span class="comment">// pcntl_wait改写pcntl_waitpid</span></span><br><span class="line"><span class="comment">// pcntl_waitpid($pid, $status, WNOHANG); </span></span><br><span class="line"><span class="comment">// 如果再pcntl_waitpid后续增加sleep， 还是会僵尸进程</span></span><br></pre></td></tr></table></figure><h1 id="更更优解决"><a href="#更更优解决" class="headerlink" title="更更优解决"></a>更更优解决</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHP-多进程之孤儿-僵尸&quot;&gt;&lt;a href=&quot;#PHP-多进程之孤儿-僵尸&quot; class=&quot;headerlink&quot; title=&quot;PHP 多进程之孤儿 / 僵尸&quot;&gt;&lt;/a&gt;PHP 多进程之孤儿 / 僵尸&lt;/h1&gt;&lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#w
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://shiwenyuan.github.io/tags/PHP/"/>
    
      <category term="Linux" scheme="https://shiwenyuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP-面向对象设计的三大特性</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazg60002ges6rgog4wld.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazg60002ges6rgog4wld.html</id>
    <published>2019-08-07T09:40:52.000Z</published>
    <updated>2019-08-07T09:49:05.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h1><p>封装，继承，多态</p><h2 id="什么是封装？"><a href="#什么是封装？" class="headerlink" title="什么是封装？"></a>什么是封装？</h2><p>把客观的事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的类进行信息的隐藏。简单的说就是：封装使对象的设计者与对象的使用者分开，使用者只要知道对象可以做什么就可以了，不需要知道具体是怎么实现的。封装可以有助于提高类和系统的安全性。</p><h2 id="什么是继承？"><a href="#什么是继承？" class="headerlink" title="什么是继承？"></a>什么是继承？</h2><p>继承指的是建立一个新的派生类，从一个或多个先前定义的类中继承数据和函数，可以重新定义或加进新数据和函数，从而建立了类的层次或等级。</p><h2 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h2><p>多态性指的是： 同一操作作用与不同类的实例，将产生不同的执行结果，即不同类的对象收到相同的消息时，将得到不同的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象的三大特性&quot;&gt;&lt;a href=&quot;#面向对象的三大特性&quot; class=&quot;headerlink&quot; title=&quot;面向对象的三大特性&quot;&gt;&lt;/a&gt;面向对象的三大特性&lt;/h1&gt;&lt;p&gt;封装，继承，多态&lt;/p&gt;
&lt;h2 id=&quot;什么是封装？&quot;&gt;&lt;a href=&quot;#什么是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://shiwenyuan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP-面向对象设计的五个基准原则</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazfq0000ges6syw1vmvd.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazfq0000ges6syw1vmvd.html</id>
    <published>2019-08-07T09:34:58.000Z</published>
    <updated>2019-08-07T09:39:12.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>S.O.L.I.D 是 首个 5 个面向对象设计 (OOD) 准则的首字母缩写<br>这些准则使得开发出易扩展、可维护的软件变得更容易。也使得代码更精简、易于重构。同样也是敏捷开发和自适应软件开发的一部分。</p><h1 id="S-O-L-I-D"><a href="#S-O-L-I-D" class="headerlink" title="S.O.L.I.D"></a>S.O.L.I.D</h1><blockquote><p>S.O.L.I.D 意思是</p><blockquote><p>S - 单一功能原则<br>O - 开闭原则<br>L - 里氏替换原则<br>I - 接口隔离原则<br>D - 依赖反转原则</p></blockquote></blockquote><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>一个类有且只能有一个因素使其改变，意思是一个类只应该有单一职责．</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>对象和实体应该对扩展开放，但是对修改关闭．</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>如果对每一个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>使用方（client）不应该依赖强制实现不使用的接口，或不应该依赖不使用的方法。</p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>实体必须依赖抽象而不是具体的实现．即高等级模块不应该依赖低等级模块，他们都应该依赖抽象．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;S.O.L.I.D 是 首个 5 个面向对象设计 (OOD) 准则的首字母缩写&lt;br&gt;这些准则使得开发出易扩展、可维护的软件变得更容易。也使
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://shiwenyuan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>腾讯面试</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazh3000iges6w4sbcxut.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazh3000iges6w4sbcxut.html</id>
    <published>2019-08-07T09:29:10.000Z</published>
    <updated>2019-08-07T09:29:37.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文偶然间在laravel-china上看到过，还不错拿出来和大家分享下，原文请移步 <a href="https://learnku.com/articles/28896" target="_blank" rel="noopener">https://learnku.com/articles/28896</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文偶然间在laravel-china上看到过，还不错拿出来和大家分享下，原文请移步 &lt;a href=&quot;https://learnku.com/articles/28896&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
      <category term="面试" scheme="https://shiwenyuan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP 面试踩过的坑</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazgg0007ges6l6ptxjh7.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazgg0007ges6l6ptxjh7.html</id>
    <published>2019-08-07T09:26:34.000Z</published>
    <updated>2019-08-07T09:28:02.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文偶然间在laravel-china上看到过，还不错拿出来和大家分享下，原文请移步 <a href="https://learnku.com/articles/28758" target="_blank" rel="noopener">https://learnku.com/articles/28758</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文偶然间在laravel-china上看到过，还不错拿出来和大家分享下，原文请移步 &lt;a href=&quot;https://learnku.com/articles/28758&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://shiwenyuan.github.io/tags/PHP/"/>
    
      <category term="面试" scheme="https://shiwenyuan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis “缓存穿透”、“缓存击穿”、“缓存雪崩”</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazgk0009ges67lln9bt9.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazgk0009ges67lln9bt9.html</id>
    <published>2019-08-07T09:16:18.000Z</published>
    <updated>2019-08-07T09:16:56.260Z</updated>
    
    <content type="html"><![CDATA[<p>前几天去面试了，吃了点亏。<br>面试官问我，你知道 “缓存穿透”、“缓存击穿”、“缓存雪崩” 吗？<br>我当时确实不知道这些高大上的名词是什么意思，就是我没听过，不知道是啥意思，面试官说，你这方面好薄弱啊～～～<br>面试结束之后我百度了一下，我去，看起来高大上的名字，其实是很常见的场景，相信很多人都会处理，<br>缓存穿透 ： DB 承受了没有必要的查询流量，意思就是查到空值的时候没有做缓存处理，再次查询的时候继续读库了<br>缓存击穿：热点 Key，大量并发读请求引起的小雪崩， 就是缓存在某个时间点过期的时候，恰好在这个时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮<br>缓存雪崩：缓存设置同一过期时间，引发的大量的读取数据库操作</p><p>分享一个讲解的链接：<a href="https://www.jianshu.com/p/fef1c22d63cb" target="_blank" rel="noopener">https://www.jianshu.com/p/fef1c22d63cb</a></p><p>专业术语还是得多了解一下，不然即使自己能解决的问题，别人用专业术语问的也不知道是个什么东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天去面试了，吃了点亏。&lt;br&gt;面试官问我，你知道 “缓存穿透”、“缓存击穿”、“缓存雪崩” 吗？&lt;br&gt;我当时确实不知道这些高大上的名词是什么意思，就是我没听过，不知道是啥意思，面试官说，你这方面好薄弱啊～～～&lt;br&gt;面试结束之后我百度了一下，我去，看起来高大上的名字，
      
    
    </summary>
    
    
      <category term="面试" scheme="https://shiwenyuan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="redis" scheme="https://shiwenyuan.github.io/tags/redis/"/>
    
      <category term="db" scheme="https://shiwenyuan.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>单例模式（Singleton）</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazh1000hges6dh2glor5.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazh1000hges6dh2glor5.html</id>
    <published>2019-08-07T08:47:39.000Z</published>
    <updated>2019-08-07T08:53:29.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>在应用程序调用的时候，只能获得一个对象实例。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>数据库连接</p><h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><p><img src="https://cdn.learnku.com/uploads/images/201803/19/1/bVjGzeAlPV.png" alt></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><blockquote><p>三私一公</p><blockquote><p>私有静态成员变量<br>私有构造函数<br>私有克隆函数<br>公共静态方法 </p></blockquote></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">cat Singleton.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesignPatterns</span>\<span class="title">Creational</span>\<span class="title">Singleton</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> Singleton</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通过懒加载获得实例（在第一次使用的时候创建）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span>: <span class="title">Singleton</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">static</span>::$instance) &#123;</span><br><span class="line">            <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不允许从外部调用以防止创建多个实例</span></span><br><span class="line"><span class="comment">    * 要使用单例，必须通过 Singleton::getInstance() 方法获取实例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 防止实例被克隆（这会创建实例的副本）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 防止反序列化（这将创建它的副本）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;在应用程序调用的时候，只能获得一个对象实例。&lt;/p&gt;
&lt;h1 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://shiwenyuan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 索引原理以及优化</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazj2001cges6d5ovabh7.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazj2001cges6d5ovabh7.html</id>
    <published>2019-08-07T08:22:24.000Z</published>
    <updated>2019-08-07T09:15:39.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文是美团一位大佬写的，还不错拿出来和大家分享下，原文请移步 <a href="https://tech.meituan.com/2014/06/30/mysql-index.html" target="_blank" rel="noopener">https://tech.meituan.com/2014/06/30/mysql-index.html</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>MySQL 凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓 “好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如 “精通 MySQL”、“SQL 语句优化”、“了解数据库原理” 等要求。我们知道一般的应用系统，读写比例在 10:1 左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。</p></blockquote><blockquote><p>本人从 13 年 7 月份起，一直在美团核心业务系统部做慢查询的优化工作，共计十余个系统，累计解决和积累了上百个慢查询案例。随着业务的复杂性提升，遇到的问题千奇百怪，五花八门，匪夷所思。本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。</p></blockquote><h1 id="一个慢查询引发的思考"><a href="#一个慢查询引发的思考" class="headerlink" title="一个慢查询引发的思考"></a>一个慢查询引发的思考</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   <span class="keyword">count</span>(*) </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   task </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   <span class="keyword">status</span>=<span class="number">2</span> </span><br><span class="line">   <span class="keyword">and</span> operator_id=<span class="number">20839</span> </span><br><span class="line">   <span class="keyword">and</span> operate_time&gt;<span class="number">1371169729</span> </span><br><span class="line">   <span class="keyword">and</span> operate_time&lt;<span class="number">1371174603</span> </span><br><span class="line">   <span class="keyword">and</span> <span class="keyword">type</span>=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>系统使用者反应有一个功能越来越慢，于是工程师找到了上面的SQL。</p><p>并且兴致冲冲的找到了我，“这个SQL需要优化，给我把每个字段都加上索引”。</p><p>我很惊讶，问道：“为什么需要每个字段都加上索引？”</p><p>“把查询的字段都加上索引会更快”，工程师信心满满。</p><p>“这种情况完全可以建一个联合索引，因为是最左前缀匹配，所以operate_time需要放到最后，而且还需要把其他相关的查询都拿来，需要做一个综合评估。”</p><p>“联合索引？最左前缀匹配？综合评估？”工程师不禁陷入了沉思。</p><p>多数情况下，我们知道索引能够提高查询效率，但应该如何建立索引？索引的顺序如何？许多人却只知道大概。其实理解这些概念并不难，而且索引的原理远没有想象的那么复杂。</p><h1 id="MySQL索引原理"><a href="#MySQL索引原理" class="headerlink" title="MySQL索引原理"></a>MySQL索引原理</h1><h2 id="索引目的"><a href="#索引目的" class="headerlink" title="索引目的"></a>索引目的</h2><p>索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><p>除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h2 id="磁盘IO与预读"><a href="#磁盘IO与预读" class="headerlink" title="磁盘IO与预读"></a>磁盘IO与预读</h2><p>前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：<br><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2014/7f46a0a4.png" alt></p><p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><p>前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。</p><h3 id="详解b-树"><a href="#详解b-树" class="headerlink" title="详解b+树"></a>详解b+树</h3><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2014/7af22798.jpg" alt></p><p>如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><h3 id="b-树的查找过程"><a href="#b-树的查找过程" class="headerlink" title="b+树的查找过程"></a>b+树的查找过程</h3><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><h3 id="b-树性质"><a href="#b-树性质" class="headerlink" title="b+树性质"></a>b+树性质</h3><p>1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p>2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h3 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h3><p>关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则：</p><h3 id="建索引的几大原则"><a href="#建索引的几大原则" class="headerlink" title="建索引的几大原则"></a>建索引的几大原则</h3><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><p>3.尽量选择区分度高的列作为索引，区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><h2 id="回到开始的慢查询"><a href="#回到开始的慢查询" class="headerlink" title="回到开始的慢查询"></a>回到开始的慢查询</h2><p>根据最左匹配原则，最开始的sql语句的索引应该是status、operator_id、type、operate_time的联合索引；其中status、operator_id、type的顺序可以颠倒，所以我才会说，把这个表的所有相关查询都找到，会综合分析；比如还有如下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> task <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">type</span> = <span class="number">12</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> task <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">0</span> ;</span><br></pre></td></tr></table></figure><p>那么索引建立成(status,type,operator_id,operate_time)就是非常正确的，因为可以覆盖到所有情况。这个就是利用了索引的最左匹配的原则</p><h2 id="查询优化神器-explain命令"><a href="#查询优化神器-explain命令" class="headerlink" title="查询优化神器 - explain命令"></a>查询优化神器 - explain命令</h2><p>关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。</p><h2 id="慢查询优化基本步骤"><a href="#慢查询优化基本步骤" class="headerlink" title="慢查询优化基本步骤"></a>慢查询优化基本步骤</h2><p>0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE</p><p>1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</p><p>2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</p><p>3.order by limit 形式的sql语句让排序的表优先查</p><p>4.了解业务方使用场景</p><p>5.加索引时参照建索引的几大原则</p><p>6.观察结果，不符合预期继续从0分析</p><h2 id="几个慢查询案例"><a href="#几个慢查询案例" class="headerlink" title="几个慢查询案例"></a>几个慢查询案例</h2><p>下面几个例子详细解释了如何分析和优化慢查询。</p><h2 id="复杂语句写法"><a href="#复杂语句写法" class="headerlink" title="复杂语句写法"></a>复杂语句写法</h2><p>很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   <span class="keyword">distinct</span> cert.emp_id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   (</span><br><span class="line">      <span class="keyword">select</span></span><br><span class="line">         emp.id <span class="keyword">as</span> emp_id,</span><br><span class="line">         emp_cert.id <span class="keyword">as</span> cert_id </span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">         employee emp </span><br><span class="line">      <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">         emp_certificate emp_cert </span><br><span class="line">            <span class="keyword">on</span> emp.id = emp_cert.emp_id </span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">         emp.is_deleted=<span class="number">0</span></span><br><span class="line">   ) cert </span><br><span class="line">      <span class="keyword">on</span> (</span><br><span class="line">         cl.ref_table=<span class="string">'Employee'</span> </span><br><span class="line">         <span class="keyword">and</span> cl.ref_oid= cert.emp_id</span><br><span class="line">      ) </span><br><span class="line">      <span class="keyword">or</span> (</span><br><span class="line">         cl.ref_table=<span class="string">'EmpCertificate'</span> </span><br><span class="line">         <span class="keyword">and</span> cl.ref_oid= cert.cert_id</span><br><span class="line">      ) </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date &gt;=<span class="string">'2013-11-07 15:03:00'</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date&lt;=<span class="string">'2013-11-08 16:00:00'</span>;</span><br></pre></td></tr></table></figure><p>0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">53 rows in <span class="keyword">set</span> (<span class="number">1.87</span> sec)</span><br></pre></td></tr></table></figure><p>1.explain</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span></span><br><span class="line">| id | select_type | table      | type  | possible_keys                   | key                   | key_len | ref               | rows  | Extra                          |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span></span><br><span class="line">|  1 | PRIMARY     | cl         | range | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date     | 8       | NULL              |   379 | Using where; Using temporary   |</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | ALL   | NULL                            | NULL                  | NULL    | NULL              | 63727 | Using where; Using join buffer |</span><br><span class="line">|  2 | DERIVED     | emp        | ALL   | NULL                            | NULL                  | NULL    | NULL              | 13317 | Using where                    |</span><br><span class="line">|  2 | DERIVED     | emp_cert   | ref   | emp_certificate_empid           | emp_certificate_empid | 4       | meituanorg.emp.id |     1 | Using index                    |</span><br><span class="line">+<span class="comment">----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+</span></span><br></pre></td></tr></table></figure><p>简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。</p><p>如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。</p><p>优化过的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   emp.id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   employee emp </span><br><span class="line">      <span class="keyword">on</span> cl.ref_table = <span class="string">'Employee'</span> </span><br><span class="line">      <span class="keyword">and</span> cl.ref_oid = emp.id  </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date &gt;=<span class="string">'2013-11-07 15:03:00'</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date&lt;=<span class="string">'2013-11-08 16:00:00'</span> </span><br><span class="line">   <span class="keyword">and</span> emp.is_deleted = <span class="number">0</span>  </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">   emp.id </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   cm_log cl </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   emp_certificate ec </span><br><span class="line">      <span class="keyword">on</span> cl.ref_table = <span class="string">'EmpCertificate'</span> </span><br><span class="line">      <span class="keyword">and</span> cl.ref_oid = ec.id  </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">   employee emp </span><br><span class="line">      <span class="keyword">on</span> emp.id = ec.emp_id  </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   cl.last_upd_date &gt;=<span class="string">'2013-11-07 15:03:00'</span> </span><br><span class="line">   <span class="keyword">and</span> cl.last_upd_date&lt;=<span class="string">'2013-11-08 16:00:00'</span> </span><br><span class="line">   <span class="keyword">and</span> emp.is_deleted = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致</p><p>5.现有索引可以满足，不需要建索引</p><p>6.用改造后的语句实验一下，只需要10ms 降低了近200倍！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span></span><br><span class="line">| id | select_type  | table      | type   | possible_keys                   | key               | key_len | ref                   | rows | Extra       |</span><br><span class="line">+<span class="comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span></span><br><span class="line">|  1 | PRIMARY      | cl         | range  | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date | 8       | NULL                  |  379 | Using where |</span><br><span class="line">|  1 | PRIMARY      | emp        | eq_ref | PRIMARY                         | PRIMARY           | 4       | meituanorg.cl.ref_oid |    1 | Using where |</span><br><span class="line">|  2 | UNION        | cl         | range  | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date | 8       | NULL                  |  379 | Using where |</span><br><span class="line">|  2 | UNION        | ec         | eq_ref | PRIMARY,emp_certificate_empid   | PRIMARY           | 4       | meituanorg.cl.ref_oid |    1 |             |</span><br><span class="line">|  2 | UNION        | emp        | eq_ref | PRIMARY                         | PRIMARY           | 4       | meituanorg.ec.emp_id  |    1 | Using where |</span><br><span class="line">| NULL | UNION RESULT | &lt;union1,2&gt; | ALL    | NULL                            | NULL              | NULL    | NULL                  | NULL |             |</span><br><span class="line">+<span class="comment">----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+</span></span><br><span class="line">53 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="明确应用场景"><a href="#明确应用场景" class="headerlink" title="明确应用场景"></a>明确应用场景</h2><p>举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   stage_poi sp </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">   sp.accurate_result=<span class="number">1</span> </span><br><span class="line">   <span class="keyword">and</span> (</span><br><span class="line">      sp.sync_status=<span class="number">0</span> </span><br><span class="line">      <span class="keyword">or</span> sp.sync_status=<span class="number">2</span> </span><br><span class="line">      <span class="keyword">or</span> sp.sync_status=<span class="number">4</span></span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p>0.先看看运行多长时间,951条数据6.22秒，真的很慢。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">951 rows in <span class="keyword">set</span> (<span class="number">6.22</span> sec)</span><br></pre></td></tr></table></figure><p>1.先explain，rows达到了361万，type = ALL表明是全表扫描。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows    | Extra       |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br><span class="line">|  1 | SIMPLE      | sp    | ALL  | NULL          | NULL | NULL    | NULL | 3613155 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br></pre></td></tr></table></figure><p>2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条。</p><p>3.让explain的rows 尽量逼近951。</p><p>看一下accurate_result = 1的记录数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*),accurate_result <span class="keyword">from</span> stage_poi  <span class="keyword">group</span> <span class="keyword">by</span> accurate_result;</span><br><span class="line">+<span class="comment">----------+-----------------+</span></span><br><span class="line">| count(*) | accurate_result |</span><br><span class="line">+<span class="comment">----------+-----------------+</span></span><br><span class="line">|     1023 |              -1 |</span><br><span class="line">|  2114655 |               0 |</span><br><span class="line">|   972815 |               1 |</span><br><span class="line">+<span class="comment">----------+-----------------+</span></span><br></pre></td></tr></table></figure><p>我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据。</p><p>再看一下sync_status字段的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select count(*),sync_status from stage_poi  group by sync_status;</span><br><span class="line">+----------+-------------+</span><br><span class="line">| count(*) | sync_status |</span><br><span class="line">+----------+-------------+</span><br><span class="line">|     3080 |           0 |</span><br><span class="line">|  3085413 |           3 |</span><br><span class="line">+----------+-------------+</span><br></pre></td></tr></table></figure><p>同样的区分度也很低，根据理论，也不适合建立索引。</p><p>问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的。</p><p>4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据。</p><p>5.根据建立索引规则，使用如下语句建立索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table stage_poi add index idx_acc_status(accurate_result,sync_status);</span><br></pre></td></tr></table></figure><p>6.观察预期结果,发现只需要200ms，快了30多倍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">952 rows in set (0.20 sec)</span><br></pre></td></tr></table></figure><p>我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。</p><h2 id="无法优化的语句"><a href="#无法优化的语句" class="headerlink" title="无法优化的语句"></a>无法优化的语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) as created_time,</span><br><span class="line">   from_unixtime(c.last_modified) as last_modified,</span><br><span class="line">   c.last_modified_user_id  </span><br><span class="line">from</span><br><span class="line">   contact c  </span><br><span class="line">inner join</span><br><span class="line">   contact_branch cb </span><br><span class="line">      on  c.id = cb.contact_id  </span><br><span class="line">inner join</span><br><span class="line">   branch_user bu </span><br><span class="line">      on  cb.branch_id = bu.branch_id </span><br><span class="line">      and bu.status in (</span><br><span class="line">         1,</span><br><span class="line">      2)  </span><br><span class="line">   inner join</span><br><span class="line">      org_emp_info oei </span><br><span class="line">         on  oei.data_id = bu.user_id </span><br><span class="line">         and oei.node_left &gt;= 2875 </span><br><span class="line">         and oei.node_right &lt;= 10802 </span><br><span class="line">         and oei.org_category = - 1  </span><br><span class="line">   order by</span><br><span class="line">      c.created_time desc  limit 0 ,</span><br><span class="line">      10;</span><br></pre></td></tr></table></figure><p>还是几个步骤。</p><p>0.先看语句运行多长时间，10条记录用了13秒，已经不可忍受。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 rows in set (13.06 sec)</span><br></pre></td></tr></table></figure><p>1.explain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br><span class="line">| id | select_type | table | type   | possible_keys                       | key                     | key_len | ref                      | rows | Extra                                        |</span><br><span class="line">+----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | oei   | ref    | idx_category_left_right,idx_data_id | idx_category_left_right | 5       | const                    | 8849 | Using where; Using temporary; Using filesort |</span><br><span class="line">|  1 | SIMPLE      | bu    | ref    | PRIMARY,idx_userid_status           | idx_userid_status       | 4       | meituancrm.oei.data_id   |   76 | Using where; Using index                     |</span><br><span class="line">|  1 | SIMPLE      | cb    | ref    | idx_branch_id,idx_contact_branch_id | idx_branch_id           | 4       | meituancrm.bu.branch_id  |    1 |                                              |</span><br><span class="line">|  1 | SIMPLE      | c     | eq_ref | PRIMARY                             | PRIMARY                 | 108     | meituancrm.cb.contact_id |    1 |                                              |</span><br><span class="line">+----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br></pre></td></tr></table></figure><p>从执行计划上看，mysql先查org_emp_info表扫描8849记录，再用索引idx_userid_status关联branch_user表，再用索引idx_branch_id关联contact_branch表，最后主键关联contact表。</p><p>rows返回的都非常少，看不到有什么异常情况。我们在看一下语句，发现后面有order by + limit组合，会不会是排序量太大搞的？于是我们简化SQL，去掉后面的order by 和 limit，看看到底用了多少记录来排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  count(*)</span><br><span class="line">from</span><br><span class="line">   contact c  </span><br><span class="line">inner join</span><br><span class="line">   contact_branch cb </span><br><span class="line">      on  c.id = cb.contact_id  </span><br><span class="line">inner join</span><br><span class="line">   branch_user bu </span><br><span class="line">      on  cb.branch_id = bu.branch_id </span><br><span class="line">      and bu.status in (</span><br><span class="line">         1,</span><br><span class="line">      2)  </span><br><span class="line">   inner join</span><br><span class="line">      org_emp_info oei </span><br><span class="line">         on  oei.data_id = bu.user_id </span><br><span class="line">         and oei.node_left &gt;= 2875 </span><br><span class="line">         and oei.node_right &lt;= 10802 </span><br><span class="line">         and oei.org_category = - 1  </span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|   778878 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (5.19 sec)</span><br></pre></td></tr></table></figure><p>发现排序之前居然锁定了778878条记录，如果针对70万的结果集排序，将是灾难性的，怪不得这么慢，那我们能不能换个思路，先根据contact的created_time排序，再来join会不会比较快呢？</p><p>于是改造成下面的语句，也可以用straight_join来优化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) as created_time,</span><br><span class="line">   from_unixtime(c.last_modified) as last_modified,</span><br><span class="line">   c.last_modified_user_id   </span><br><span class="line">from</span><br><span class="line">   contact c  </span><br><span class="line">where</span><br><span class="line">   exists (</span><br><span class="line">      select</span><br><span class="line">         1 </span><br><span class="line">      from</span><br><span class="line">         contact_branch cb  </span><br><span class="line">      inner join</span><br><span class="line">         branch_user bu        </span><br><span class="line">            on  cb.branch_id = bu.branch_id        </span><br><span class="line">            and bu.status in (</span><br><span class="line">               1,</span><br><span class="line">            2)      </span><br><span class="line">         inner join</span><br><span class="line">            org_emp_info oei           </span><br><span class="line">               on  oei.data_id = bu.user_id           </span><br><span class="line">               and oei.node_left &gt;= 2875           </span><br><span class="line">               and oei.node_right &lt;= 10802           </span><br><span class="line">               and oei.org_category = - 1      </span><br><span class="line">         where</span><br><span class="line">            c.id = cb.contact_id    </span><br><span class="line">      )    </span><br><span class="line">   order by</span><br><span class="line">      c.created_time desc  limit 0 ,</span><br><span class="line">      10;</span><br></pre></td></tr></table></figure><p>验证一下效果 预计在1ms内，提升了13000多倍！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>本以为至此大工告成，但我们在前面的分析中漏了一个细节，先排序再join和先join再排序理论上开销是一样的，为何提升这么多是因为有一个limit！大致执行过程是：mysql先按索引排序得到前10条记录，然后再去join过滤，当发现不够10条的时候，再次去10条，再次join，这显然在内层join过滤的数据非常多的时候，将是灾难的，极端情况，内层一条数据都找不到，mysql还傻乎乎的每次取10条，几乎遍历了这个数据表！</p><p>用不同参数的SQL试验下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">   sql_no_cache   c.id,</span><br><span class="line">   c.name,</span><br><span class="line">   c.position,</span><br><span class="line">   c.sex,</span><br><span class="line">   c.phone,</span><br><span class="line">   c.office_phone,</span><br><span class="line">   c.feature_info,</span><br><span class="line">   c.birthday,</span><br><span class="line">   c.creator_id,</span><br><span class="line">   c.is_keyperson,</span><br><span class="line">   c.giveup_reason,</span><br><span class="line">   c.status,</span><br><span class="line">   c.data_source,</span><br><span class="line">   from_unixtime(c.created_time) as created_time,</span><br><span class="line">   from_unixtime(c.last_modified) as last_modified,</span><br><span class="line">   c.last_modified_user_id    </span><br><span class="line">from</span><br><span class="line">   contact c   </span><br><span class="line">where</span><br><span class="line">   exists (</span><br><span class="line">      select</span><br><span class="line">         1        </span><br><span class="line">      from</span><br><span class="line">         contact_branch cb         </span><br><span class="line">      inner join</span><br><span class="line">         branch_user bu                     </span><br><span class="line">            on  cb.branch_id = bu.branch_id                     </span><br><span class="line">            and bu.status in (</span><br><span class="line">               1,</span><br><span class="line">            2)                </span><br><span class="line">         inner join</span><br><span class="line">            org_emp_info oei                           </span><br><span class="line">               on  oei.data_id = bu.user_id                           </span><br><span class="line">               and oei.node_left &gt;= 2875                           </span><br><span class="line">               and oei.node_right &lt;= 2875                           </span><br><span class="line">               and oei.org_category = - 1                </span><br><span class="line">         where</span><br><span class="line">            c.id = cb.contact_id           </span><br><span class="line">      )        </span><br><span class="line">   order by</span><br><span class="line">      c.created_time desc  limit 0 ,</span><br><span class="line">      10;</span><br><span class="line">Empty set (2 min 18.99 sec)</span><br></pre></td></tr></table></figure><p>2 min 18.99 sec！比之前的情况还糟糕很多。由于mysql的nested loop机制，遇到这种情况，基本是无法优化的。这条语句最终也只能交给应用系统去优化自己的逻辑了。</p><p>通过这个例子我们可以看到，并不是所有语句都能优化，而往往我们优化时，由于SQL用例回归时落掉一些极端情况，会造成比原来还严重的后果。所以，第一：不要指望所有语句都能通过SQL优化，第二：不要过于自信，只针对具体case来优化，而忽略了更复杂的情况。</p><p>慢查询的案例就分析到这儿，以上只是一些比较典型的案例。我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。</p><h1 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h1><p>本文以一个慢查询案例引入了MySQL索引原理、优化慢查询的一些方法论;并针对遇到的典型案例做了详细的分析。其实做了这么长时间的语句优化后才发现，任何数据库层面的优化都抵不上应用系统的优化，同样是MySQL，可以用来支撑Google/FaceBook/Taobao应用，但可能连你的个人网站都撑不住。套用最近比较流行的话：“查询容易，优化不易，且写且珍惜！”</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p>1.《高性能MySQL》 2.《数据结构与算法分析》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文是美团一位大佬写的，还不错拿出来和大家分享下，原文请移步 &lt;a href=&quot;https://tech.meit
      
    
    </summary>
    
    
      <category term="db" scheme="https://shiwenyuan.github.io/tags/db/"/>
    
      <category term="Mysql" scheme="https://shiwenyuan.github.io/tags/Mysql/"/>
    
      <category term="优化" scheme="https://shiwenyuan.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazgv000dges6zpo6ubm1.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazgv000dges6zpo6ubm1.html</id>
    <published>2019-08-07T02:25:13.000Z</published>
    <updated>2019-08-07T07:51:39.598Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://glados.network/console" target="_blank" rel="noopener">https://glados.network/console</a><br>邮箱注册、初始免费用30t，亲测有效</p><p>这个网站是我偶然间听别人说的，就抱着试一试的态度去注册了一下，结果非常令人开心，要比我之前用到那个网站快很多，本着好东西就要分享出来的态度分享给大家</p><p>当前的网站还在内测阶段所以注册时候必须要一个邀请码:DEC8I-ANGH8-XBZ34-NL33I    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://glados.network/console&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://glados.network/console&lt;/a&gt;&lt;br&gt;邮箱注册、初始免费用30t，亲测有效&lt;/p&gt;
&lt;p&gt;这
      
    
    </summary>
    
    
      <category term="系统工具" scheme="https://shiwenyuan.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置https</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazhz0015ges6m9mf4gvd.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazhz0015ges6m9mf4gvd.html</id>
    <published>2019-08-06T03:38:32.000Z</published>
    <updated>2019-08-06T03:41:47.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网站https"><a href="#网站https" class="headerlink" title="网站https"></a>网站https</h1><p>网站https化已是大势所趋，个人blog也都可以把https玩儿起来！</p><h1 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个免费、自动化、开放的证书签发服务。它由 ISRG（Internet Security Research Group，互联网安全研究小组）提供服务，而 ISRG 是来自于美国加利福尼亚州的一个公益组织。Let&apos;s Encrypt 得到了 Mozilla、Cisco、Akamai、Electronic Frontier Foundation 和 Chrome 等众多公司和机构的支持，发展十分迅猛。</span><br><span class="line">申请 Let&apos;s Encrypt 证书不但免费，还非常简单，虽然每次只有 90 天的有效期，但可以通过脚本定期更新，配好之后一劳永逸。经过一段时间的观望，我也正式启用 Let&apos;s Encrypt 证书了，本文记录本站申请过程和遇到的问题。</span><br><span class="line">我没有使用 Let&apos;s Encrypt 官网提供的工具来申请证书，而是用了 [acme.sh](http://https://github.com/Neilpang/acme.sh &quot;acme.sh&quot;) 这个更为小巧的开源工具。以下内容基本按照 acme的说明文档写的，省略了一些我不需要的步骤。</span><br></pre></td></tr></table></figure><hr><h1 id="配置验证服务"><a href="#配置验证服务" class="headerlink" title="配置验证服务"></a>配置验证服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传统 CA 的验证方式一般是往 admin@youremail.com 发验证邮件，而 Let&apos;s Encrypt 是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。</span><br></pre></td></tr></table></figure><h1 id="配置前提"><a href="#配置前提" class="headerlink" title="配置前提"></a>配置前提</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. nginx安装了https模块</span><br></pre></td></tr></table></figure><hr><h1 id="通过web访问check域名权限"><a href="#通过web访问check域名权限" class="headerlink" title="通过web访问check域名权限"></a>通过web访问check域名权限</h1><h2 id="步骤1（建立目录或者nginx访问规则）"><a href="#步骤1（建立目录或者nginx访问规则）" class="headerlink" title="步骤1（建立目录或者nginx访问规则）"></a>步骤1（建立目录或者nginx访问规则）</h2><h1 id="CA认证"><a href="#CA认证" class="headerlink" title="CA认证"></a>CA认证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">    # 注：这里的$challenges_dir请替换成你自己的真实目录，如：/home/work/www/challenges/</span><br><span class="line">    alias $challenges_dir;</span><br><span class="line">    try_files $uri =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录添加.well-known/acme-challenge</span><br><span class="line">Let&apos;s Encrypt 用来校验网站权限</span><br></pre></td></tr></table></figure><h2 id="步骤二-生成证书"><a href="#步骤二-生成证书" class="headerlink" title="步骤二 生成证书"></a>步骤二 生成证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./acme.sh --issue -d diancan.xiaochengxu.phpblog.com.cn --webroot /home/www/xiaochengxu/diancan</span><br></pre></td></tr></table></figure><h2 id="步骤三-cp证书到指定位置"><a href="#步骤三-cp证书到指定位置" class="headerlink" title="步骤三 cp证书到指定位置"></a>步骤三 cp证书到指定位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert -d www.your-app.com \</span><br><span class="line">               --keypath       /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn.key  \</span><br><span class="line">               --fullchainpath /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn.key.pem \</span><br><span class="line">               --reloadcmd     &quot; /usr/local/nginx/sbin/nginx -s reload&quot;</span><br></pre></td></tr></table></figure><h2 id="步骤四-配置nginx"><a href="#步骤四-配置nginx" class="headerlink" title="步骤四 配置nginx"></a>步骤四 配置nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">        location / &#123;</span><br><span class="line">            rewrite ^/(.*)$ https://diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen    443 ssl;</span><br><span class="line">    server_name diancan.xiaochengxu.phpblog.com.cn;</span><br><span class="line">    include  /usr/local/nginx/ssl/ssl_params;</span><br><span class="line">    ssl_certificate    /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn/diancan.xiaochengxu.phpblog.com.cn.cer;</span><br><span class="line">    ssl_certificate_key    /usr/local/nginx/ssl/diancan.xiaochengxu.phpblog.com.cn/diancan.xiaochengxu.phpblog.com.cn.key;</span><br><span class="line">    root /home/www/diancan/xiaochengxu; # 该项要修改为你准备存放相关网页的路径</span><br><span class="line">    include /usr/local/nginx/ssl/ssl_headers;</span><br><span class="line">    </span><br><span class="line">   location / &#123;</span><br><span class="line">         try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">         index  index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include /usr/local/nginx/conf/fastcgi.conf;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># out  /usr/local/nginx/ssl/ssl_headers</span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;</span><br><span class="line"># out  /usr/local/nginx/ssl/ssl_params</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_dhparam /usr/local/nginx/ssl/dhparam.pem; # See https://weakdh.org/sysadmin.html for more details</span><br><span class="line">ssl_session_cache shared:SSL:1m;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_prefer_server_ciphers   on;</span><br><span class="line">ssl_ciphers &quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&quot;;</span><br><span class="line"></span><br><span class="line">dhparam.pem这个文件是我之前就生成好的，生成命令</span><br><span class="line">openssl dhparam -out /usr/local/nginx/ssl/dhparam.pem 2048</span><br></pre></td></tr></table></figure><h2 id="步骤五-重启nginx查看"><a href="#步骤五-重启nginx查看" class="headerlink" title="步骤五 重启nginx查看"></a>步骤五 重启nginx查看</h2><h2 id><a href="#" class="headerlink" title></a><img src="https://upload-images.jianshu.io/upload_images/11264231-e8f27e6771e82889.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="https配置成功后web访问界面" title="https配置成功后web访问界面"></h2><h1 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h1><p>申请下来的证书有效期只有90天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在crontab 中添加一条命令</span><br><span class="line">0 0 * * *  /home/work/opbin/ssl/acme.sh-master/acme.sh --cron --home /home/work/opbin/ssl/acme.sh-master/acme.sh</span><br><span class="line">此处就是每天凌晨检查证书  证书会在60天的时候更新 因为acme会记住之前执行的installcert，所以更新完证书之后他会自动重启一下nginx 如果之前运行installcert的时候没有输入reloadcmd,则需要更新之后自己手动重启(这样就没有自动更新的意义了)</span><br></pre></td></tr></table></figure><hr><h1 id="通过dns配置check权限"><a href="#通过dns配置check权限" class="headerlink" title="通过dns配置check权限"></a>通过dns配置check权限</h1><h2 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h2><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ !1019</span><br><span class="line">./acme.sh --issue --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Creating domain key</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] The domain key is here: /home/work/.acme.sh/*.test.com/*.test.com.key</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Multi domain=&apos;DNS:*.test.com,test.com&apos;</span><br><span class="line">[Tue Sep 11 21:24:56 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:24:59 CST 2018] Getting webroot for domain=&apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Getting webroot for domain=&apos;test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Add the following TXT record:</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] TXT value: &apos;Oe0iBXj3QvUErZOpROldRLx5jpyXbazsX36lkI46C_Y&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please be aware that you prepend _acme-challenge. before your domain</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] so the resulting subdomain will be: _acme-challenge.test.com</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Add the following TXT record:</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] TXT value: &apos;qVFtVzCnBsj1omQcdU1m8180rUBO8V5AHDczFUHqsMY&apos;</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please be aware that you prepend _acme-challenge. before your domain</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] so the resulting subdomain will be: _acme-challenge.test.com</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please add the TXT records to the domains, and re-run with --renew.</span><br><span class="line">[Tue Sep 11 21:25:00 CST 2018] Please check log file for more details: /home/work/.acme.sh/acme.sh.log</span><br><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh --renew --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:31:18 CST 2018] Renew: &apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Multi domain=&apos;DNS:*.test.com,test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Verifying:*.test.com</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Verifying:test.com</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Verify finished, start to sign.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Cert success.</span><br><span class="line">这个上面说的是需要在dns中添加</span><br><span class="line">Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">TXT value: &apos;Oe0iBXj3QvUErZOpROldRLx5jpyXbazsX36lkI46C_Y&apos;</span><br><span class="line">与</span><br><span class="line"> Domain: &apos;_acme-challenge.test.com&apos;</span><br><span class="line">TXT value: &apos;qVFtVzCnBsj1omQcdU1m8180rUBO8V5AHDczFUHqsMY&apos;</span><br></pre></td></tr></table></figure><p>生效后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh --renew --dns -d *.test.com -d test.com --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br><span class="line">[Tue Sep 11 21:31:18 CST 2018] Renew: &apos;*.test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Multi domain=&apos;DNS:*.test.com,DNS:test.com&apos;</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Getting domain auth token for each domain</span><br><span class="line">[Tue Sep 11 21:31:19 CST 2018] Verifying:*.test.com</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:24 CST 2018] Verifying:test.com</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Success</span><br><span class="line">[Tue Sep 11 21:31:27 CST 2018] Verify finished, start to sign.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Cert success.</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIGGDCCBQCgAwIBAgISA/ZIZ/p9WiVXaWSVytreKZWhMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</span><br><span class="line">ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xODA5MTExMjMxMjNaFw0x</span><br><span class="line">ODEyMTAxMjMxMjNaMBoxGDAWBgNVBAMMDyoueG1hbmxlZ2FsLmNvbTCCASIwDQYJ</span><br><span class="line">KoZIhvcNAQEBBQADggEPADCCAQoCggEBANnH033ObKrmxX9eLIKqt3kKxcIrcfab</span><br><span class="line">qnLJ0nGnjLRaOXco7B3q865OHx4PTKNT89RSAzfJQ5ZSXBY8QqbZAKv8kAzPA7yE</span><br><span class="line">0wliJ3rYCesVfAR1CgnOc+jQkTjlZp0q138/GDthgplvaziJUTaGL31Dj338oFU3</span><br><span class="line">xmyMxp2JmzUUjD4KkoHPZql5xkQ3pLzxRInWGMfal7f4oHaZQJr1Xwyu5BR/m9G1</span><br><span class="line">+PBlmqGsTka75n5i8uchjIFPAuH48c9fEJXLB0TSUfvAdi9HDpVxXsglmiw4eL5J</span><br><span class="line">F5ORYIKajAXObt/vl2uNbUHYV5Mr74jr7U/YqAA48X/x9jeHaVNSS/sCAwEAAaOC</span><br><span class="line">AyYwggMiMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYB</span><br><span class="line">BQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUhLPM1+fVbGsgfc1CFAsRyu96</span><br><span class="line">DUMwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEE</span><br><span class="line">YzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQu</span><br><span class="line">b3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQu</span><br><span class="line">b3JnLzApBgNVHREEIjAggg8qLnhtYW5sZWdhbC5jb22CDXhtYW5sZWdhbC5jb20w</span><br><span class="line">gf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeYGCysGAQQBgt8TAQEBMIHWMCYGCCsG</span><br><span class="line">AQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYBBQUHAgIw</span><br><span class="line">gZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1cG9uIGJ5</span><br><span class="line">IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSBpbiBhY2NvcmRhbmNlIHdpdGggdGhl</span><br><span class="line">IENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNlbmNyeXB0</span><br><span class="line">Lm9yZy9yZXBvc2l0b3J5LzCCAQQGCisGAQQB1nkCBAIEgfUEgfIA8AB2AMEWSuCn</span><br><span class="line">ctLUOS3ICsEHcNTwxJvemRpIQMH6B1Fk9jNgAAABZcjUVQgAAAQDAEcwRQIhALEw</span><br><span class="line">fEJJ6OS6IiWZNXZEO/ymIAgZGpD812KCt484URUHAiAW6FCC+6rYa1AFUdT/vFcC</span><br><span class="line">3nc4MC9IGHLPOKyiyC8pEAB2AKRQEmkFWhVUXmIRqze8ED9irlV2pF5LFxRFPhsi</span><br><span class="line">EGolAAABZcjUVQoAAAQDAEcwRQIgETcbXZ/E5QEB/oRR3xr4B3dZELF4TfnTJJgH</span><br><span class="line">7J8YF9gCIQCKq4jXNwJjCAJDz0K81MaoAZ23CImUYJIHCVJTitzphzANBgkqhkiG</span><br><span class="line">9w0BAQsFAAOCAQEAPWWEp4v4cvU3c+fgt2a0mQXI5q0gmYQAYaxyXubs3HfxFsFX</span><br><span class="line">zroAPH6wvLk/Cw1EciBInnXtvQ+DDfi4FsyhWn598czJ/YEIGiV7ZCi1Ah8NVniS</span><br><span class="line">T+R3nVIBqhSDCGOpmHdvtfCRCoZErAVFvv0ABsQUSQHkEYmiPwEddhU5srOENzcV</span><br><span class="line">4qel/9/bzK3hGlPWB8jLvWQ8uHtSHibGAJsnEG0rMYkFs6pqnzM2EFdRNfm3axDK</span><br><span class="line">D8Gai7V5Ezu31iwvgZXjLmhl6xtH3CzkqmPaDarxJtnZLet8SLaEY0inmbhvupOG</span><br><span class="line">LUuO+EnAXlxk40z8V1/GtWuyYMz38OwCWcB5fA==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Your cert is in  /home/work/.acme.sh/*.test.com/*.test.com.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Your cert key is in  /home/work/.acme.sh/*.test.com/*.test.com.key </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] The intermediate CA cert is in  /home/work/.acme.sh/*.test.com/ca.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] And the full chain certs is there:  /home/work/.acme.sh/*.test.com/fullchain.cer </span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] It seems that you are using dns manual mode. please take care: The dns manual mode can not renew automatically, you must issue it again manually. You&apos;d better use the other modes instead.</span><br><span class="line">[Tue Sep 11 21:31:30 CST 2018] Call hook error.</span><br></pre></td></tr></table></figure><p>生成成功后配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[work@iZ25ndyf9bxZ acme.sh-master]$ ./acme.sh  --installcert  -d *.xmanlegal.com \</span><br><span class="line">&gt; --key-file /mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key \</span><br><span class="line">&gt; --fullchain-file /mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key.cer \</span><br><span class="line">&gt; --reloadcmd &quot;echo &quot;Asdf1234&quot; sudo -S /mnt/usr/sbin/nginx -s reload&quot;</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Installing key to:/mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Installing full chain to:/mnt/usr/ssl/xmanlegal.com/xmanlegal.com.key.cer</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Run reload cmd: echo Asdf1234 sudo -S /mnt/usr/sbin/nginx -s reload</span><br><span class="line">Asdf1234 sudo -S /mnt/usr/sbin/nginx -s reload</span><br><span class="line">[Tue Sep 11 21:36:31 CST 2018] Reload success</span><br></pre></td></tr></table></figure><hr><h1 id="末文"><a href="#末文" class="headerlink" title="末文"></a>末文</h1><p><a href="https://www.ssllabs.com/ssltest/index.html" title="证书级别测试" target="_blank" rel="noopener">证书级别测试</a><br><a href="https://github.com/Neilpang/acme.sh/wiki/Blogs-and-tutorials" title="相关技术博客" target="_blank" rel="noopener">相关技术博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网站https&quot;&gt;&lt;a href=&quot;#网站https&quot; class=&quot;headerlink&quot; title=&quot;网站https&quot;&gt;&lt;/a&gt;网站https&lt;/h1&gt;&lt;p&gt;网站https化已是大势所趋，个人blog也都可以把https玩儿起来！&lt;/p&gt;
&lt;h1 id=&quot;L
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://shiwenyuan.github.io/tags/nginx/"/>
    
      <category term="linux" scheme="https://shiwenyuan.github.io/tags/linux/"/>
    
      <category term="https" scheme="https://shiwenyuan.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>开发自己的composer包</title>
    <link href="https://shiwenyuan.github.io/posts/cjz2bazgy000eges6iuicqnrx.html"/>
    <id>https://shiwenyuan.github.io/posts/cjz2bazgy000eges6iuicqnrx.html</id>
    <published>2019-08-06T03:38:17.000Z</published>
    <updated>2019-08-06T03:41:47.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="composer简介"><a href="#composer简介" class="headerlink" title="composer简介"></a>composer简介</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</span><br></pre></td></tr></table></figure><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p> 1.一个github账号</p><p> 2.一个packagist账号</p><p> 3.一台安装composer的开发机</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://packagist.org/login/" title="packagist注册链接" target="_blank" rel="noopener">packagist注册链接</a></td><td><a href="https://github.com/join?source=experiment-header-control-home" title="github注册链接" target="_blank" rel="noopener">github注册链接</a></td><td><a href="https://docs.phpcomposer.com/" title="composer注册链接" target="_blank" rel="noopener">composer注册链接</a></td></tr><tr><td>—</td><td></td><td></td></tr><tr><td># 发布流程</td><td></td><td></td></tr></tbody></table><h2 id="1-首先在github上创建一个项目"><a href="#1-首先在github上创建一个项目" class="headerlink" title="1.首先在github上创建一个项目"></a>1.首先在github上创建一个项目</h2><h2 id="2-把项目克隆到本地"><a href="#2-把项目克隆到本地" class="headerlink" title="2.把项目克隆到本地"></a>2.把项目克隆到本地</h2><h2 id="3-进入项目根目录初始化项目"><a href="#3-进入项目根目录初始化项目" class="headerlink" title="3.进入项目根目录初始化项目"></a>3.进入项目根目录初始化项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">➜  xdpframework git:(master) composer init</span><br><span class="line"></span><br><span class="line">                                            </span><br><span class="line">  Welcome to the Composer config generator  </span><br><span class="line">                                            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This command will guide you through creating your composer.json config.</span><br><span class="line"></span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [shiwenyuan/xdpframework]: </span><br><span class="line">Description []: a xdp framework</span><br><span class="line">Author [北行10000 &lt;13341007105@163.com&gt;, n to skip]: </span><br><span class="line">Minimum Stability []: dev</span><br><span class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []: </span><br><span class="line">License []: MIT</span><br><span class="line"></span><br><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]? </span><br><span class="line">Search for a package: </span><br><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]? </span><br><span class="line">Search for a package: </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Do you confirm generation [yes]? </span><br><span class="line">Would you like the vendor directory added to your .gitignore [yes]? yes</span><br></pre></td></tr></table></figure><p>此时目录下回程车一个composer.json文件，文件内容形如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编写自己的composer包"><a href="#4-编写自己的composer包" class="headerlink" title="4.编写自己的composer包"></a>4.编写自己的composer包</h2><h3 id="4-1-此处我创建了一个src目录并实现了SayHello类"><a href="#4-1-此处我创建了一个src目录并实现了SayHello类" class="headerlink" title="4.1 此处我创建了一个src目录并实现了SayHello类"></a>4.1 此处我创建了一个src目录并实现了SayHello类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  xdpframework git:(master) ✗ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── composer.json</span><br><span class="line">└── src</span><br><span class="line">    └── SayHello.php</span><br></pre></td></tr></table></figure><h3 id="4-2-修改composer-json"><a href="#4-2-修改composer-json" class="headerlink" title="4.2 修改composer.json"></a>4.2 修改composer.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;shiwenyuan/xdpframework&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;a xdp framework&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;北行10000&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;13341007105@163.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;XdpFrameWork\\&quot;: &quot;src/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-自动加载src目录"><a href="#4-3-自动加载src目录" class="headerlink" title="4.3 自动加载src目录"></a>4.3 自动加载src目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">在4.2添加了src的加载运行composer install实现自动加载</span><br><span class="line">➜  xdpframework git:(master) ✗ composer install</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Nothing to install or update</span><br><span class="line">Generating autoload files</span><br><span class="line">此时目录中会生成一个vendor 它实现了加载方法</span><br><span class="line">➜  xdpframework git:(master) ✗ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── composer.json</span><br><span class="line">├── src</span><br><span class="line">│   └── SayHello.php</span><br><span class="line">└── vendor</span><br><span class="line">    ├── autoload.php</span><br><span class="line">    └── composer</span><br><span class="line">        ├── ClassLoader.php</span><br><span class="line">        ├── LICENSE</span><br><span class="line">        ├── autoload_classmap.php</span><br><span class="line">        ├── autoload_namespaces.php</span><br><span class="line">        ├── autoload_psr4.php</span><br><span class="line">        ├── autoload_real.php</span><br><span class="line">        ├── autoload_static.php</span><br><span class="line">        └── installed.json</span><br></pre></td></tr></table></figure><h3 id="4-4-测试结果"><a href="#4-4-测试结果" class="headerlink" title="4.4 测试结果"></a>4.4 测试结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">创建test.php</span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: shiwenyuan</span><br><span class="line"> * Date: 2018/8/2 13341007105@163.com</span><br><span class="line"> * Time: 下午8:56</span><br><span class="line"> */</span><br><span class="line">require_once __DIR__.&quot;/vendor/autoload.php&quot;;</span><br><span class="line">use XdpFrameWork\SayHello;</span><br><span class="line">SayHello::world();</span><br><span class="line">命令行中运行</span><br><span class="line">➜  xdpframework git:(master) ✗ php test.php</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="4-5-忽略vendor、composer-json文件"><a href="#4-5-忽略vendor、composer-json文件" class="headerlink" title="4.5 忽略vendor、composer.json文件"></a>4.5 忽略vendor、composer.json文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改.gitignore增加下面两行</span><br><span class="line">/vendor/</span><br></pre></td></tr></table></figure><h3 id="4-6提交代码到-github"><a href="#4-6提交代码到-github" class="headerlink" title="4.6提交代码到 github"></a>4.6提交代码到 github</h3><hr><h2 id="5-Packagist配置"><a href="#5-Packagist配置" class="headerlink" title="5. Packagist配置"></a>5. Packagist配置</h2><h3 id="5-1-github关联到Packagist"><a href="#5-1-github关联到Packagist" class="headerlink" title="5.1 github关联到Packagist"></a>5.1 github关联到Packagist</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先要在Packagist上登录</span><br><span class="line">2.点击顶部导航条中的Summit按钮</span><br><span class="line">3.在输入框中输入github上的仓库地址，如：https://github.com/shiwenyuan/xdpfarmwork</span><br><span class="line">4.然后点击Check按钮</span><br><span class="line">5.Packagist会去检测此仓库地址的代码是否符合Composer的Package包的要求</span><br><span class="line">6.检测正常的话，会出现Submit按钮，再点击一下Submit按钮，我们的包就提交到Packagist上了</span><br></pre></td></tr></table></figure><h3 id="5-2-配置自动同步"><a href="#5-2-配置自动同步" class="headerlink" title="5.2 配置自动同步"></a>5.2 配置自动同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.从Packagist点击个人中心点击profile获取token然后复制</span><br><span class="line">2.到github项目首页上点击settings、点击webhooks、点击addwebhook</span><br><span class="line">3.把https://packagist.org/api/bitbucket?username=USERNAME&amp;apiToken=TOKEN 复制到Payload URL，在下方输入密码后保存</span><br></pre></td></tr></table></figure><h3 id="5-3-打tag测试"><a href="#5-3-打tag测试" class="headerlink" title="5.3 打tag测试"></a>5.3 打tag测试</h3><hr><h2 id="引用包"><a href="#引用包" class="headerlink" title="引用包"></a>引用包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require shiwenyuan/xdpframework</span><br></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果下载不下来到话就换一下镜像</span><br><span class="line">composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br><span class="line">刚发布上去可能会下载不到，没有同步过来-- 可以等一会在试试看</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;composer简介&quot;&gt;&lt;a href=&quot;#composer简介&quot; class=&quot;headerlink&quot; title=&quot;composer简介&quot;&gt;&lt;/a&gt;composer简介&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="php" scheme="https://shiwenyuan.github.io/tags/php/"/>
    
      <category term="composer" scheme="https://shiwenyuan.github.io/tags/composer/"/>
    
  </entry>
  
</feed>
